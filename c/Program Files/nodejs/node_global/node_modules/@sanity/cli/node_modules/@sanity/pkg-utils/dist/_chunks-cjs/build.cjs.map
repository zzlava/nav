{"version":3,"file":"build.cjs","sources":["../../src/node/resolveBuildTasks.ts","../../src/node/spinner.ts","../../src/node/build.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\n\nimport type {BuildContext, PkgExport, PkgFormat, PkgRuntime} from './core'\nimport type {\n  BuildTask,\n  DtsTask,\n  RollupLegacyTask,\n  RollupReactCompilerTask,\n  RollupTask,\n  RollupTaskEntry,\n} from './tasks'\nimport {fileEnding, getTargetPaths, legacyEnding} from './tasks/dts/getTargetPaths'\n\n/** @internal */\nexport function resolveBuildTasks(ctx: BuildContext): BuildTask[] {\n  const {config, cwd, pkg, target} = ctx\n\n  const bundles = config?.bundles || []\n\n  const tasks: BuildTask[] = []\n\n  const exports = Object.entries(ctx.exports || {}).map(\n    ([_path, exp]) => ({_path, ...exp}) as PkgExport & {_path: string},\n  )\n\n  const dtsTask: DtsTask = {\n    type: 'build:dts',\n    entries: [],\n  }\n\n  const rollupTasks: Record<string, RollupTask> = {}\n  const rollupLegacyTasks: Record<string, RollupLegacyTask> = {}\n  const rollupReactCompilerTask: RollupReactCompilerTask = {\n    type: 'build:react-compiler',\n    runtime: 'browser',\n    format: 'esm',\n    entries: [],\n    target: target.browser,\n  }\n\n  function addRollupTaskEntry(format: PkgFormat, runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `${format}:${runtime}`\n\n    if (rollupTasks[buildId]) {\n      rollupTasks[buildId].entries.push(entry)\n    } else {\n      rollupTasks[buildId] = {\n        type: 'build:js',\n        buildId,\n        entries: [entry],\n        runtime,\n        format,\n        target: target[runtime],\n      }\n    }\n  }\n\n  function addRollupLegacyTaskEntry(runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `esm:${runtime}`\n\n    if (rollupLegacyTasks[buildId]) {\n      rollupLegacyTasks[buildId].entries.push(entry)\n    } else {\n      rollupLegacyTasks[buildId] = {\n        type: 'build:legacy',\n        buildId,\n        entries: [entry],\n        runtime,\n        format: 'esm',\n        // @TODO set a different target here that is compatible with legacy bundlers and testing tools like brownfield jest\n        target: target[runtime],\n      }\n    }\n  }\n\n  function addRollupReactCompilerTaskEntry(entry: RollupTaskEntry) {\n    rollupReactCompilerTask.entries.push(entry)\n  }\n\n  // Parse `dts` tasks\n  for (const exp of exports) {\n    const importId = path.join(pkg.name, exp._path)\n\n    if (exp.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.source,\n        targetPaths: getTargetPaths(pkg.type, exp),\n      })\n    }\n\n    if (exp.browser?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.browser.source,\n        targetPaths: getTargetPaths(pkg.type, exp.browser),\n      })\n    }\n\n    if (exp.node?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.node.source,\n        targetPaths: getTargetPaths(pkg.type, exp.node),\n      })\n    }\n\n    // @TODO implement this\n    // if (exp['react-compiler']?.source?.endsWith('.ts')) {\n    //   dtsTask.entries.push({\n    //     importId,\n    //     exportPath: exp._path,\n    //     sourcePath: exp['react-compiler'].source,\n    //     targetPaths: getTargetPaths(pkg.type, exp['react-compiler']),\n    //   })\n    // }\n  }\n\n  // Handle dts tasks for bundles\n  for (const bundle of bundles) {\n    if (bundle.source?.endsWith('.ts')) {\n      // importId needs to be how the bundle is used, like `@sanity/pkg-utils/dist/cli`\n      // exportPath needs to be the path to the bundle, like `./dist/cli`\n      // targetPaths is then: [./dist/cli.d.ts, ./dist/cli.d.cts]\n      const exportPath = (bundle.import || bundle.require)!.replace(/\\.[mc]?js$/, '')\n      const importId = path.join(pkg.name, exportPath)\n\n      dtsTask.entries.push({\n        importId,\n        exportPath,\n        sourcePath: bundle.source,\n        targetPaths: getTargetPaths(pkg.type, bundle),\n      })\n    }\n  }\n\n  // Add dts task\n  if (dtsTask.entries.length) {\n    tasks.push(dtsTask)\n  }\n\n  if (!ctx.emitDeclarationOnly) {\n    // Parse rollup:commonjs:* tasks\n    for (const exp of exports) {\n      const output = exp.require\n\n      if (!output) continue\n\n      addRollupTaskEntry('commonjs', ctx.runtime, {\n        path: exp._path,\n        source: exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:esm:* tasks\n    for (const exp of exports) {\n      const output = exp.import\n\n      if (!output) continue\n\n      addRollupTaskEntry('esm', ctx.runtime, {\n        path: exp._path,\n        source: exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:commonjs:browser tasks\n    for (const exp of exports) {\n      const output = exp.browser?.require\n\n      if (!output) continue\n\n      addRollupTaskEntry('commonjs', 'browser', {\n        path: exp._path,\n        source: exp.browser?.source || exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:esm:browser tasks\n    for (const exp of exports) {\n      const output = exp.browser?.import\n\n      if (!output) continue\n\n      addRollupTaskEntry('esm', 'browser', {\n        path: exp._path,\n        source: exp.browser?.source || exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:react-compiler tasks\n    for (const exp of exports) {\n      const output = exp['react-compiler']?.default\n\n      if (!output) continue\n\n      addRollupReactCompilerTaskEntry({\n        path: exp._path,\n        source: exp['react-compiler']?.source || exp.source,\n        output,\n      })\n    }\n\n    // Add react-compiler task\n    if (rollupReactCompilerTask.entries.length) {\n      tasks.push(rollupReactCompilerTask)\n    }\n\n    // Create rollup bundles that legacy export files will re-export\n    if (config?.legacyExports) {\n      for (const exp of exports) {\n        const runtime = exp.browser?.import ? 'browser' : ctx.runtime\n        const output = exp.browser?.import || exp.import\n\n        if (!output) continue\n\n        // Change the suffix to what the legacy exports will use\n        const legacyOutput = output.replace(fileEnding, legacyEnding)\n\n        addRollupLegacyTaskEntry(runtime, {\n          path: exp._path,\n          source: exp.browser?.source || exp.source,\n          output: legacyOutput,\n        })\n      }\n    }\n\n    for (const bundle of bundles) {\n      const idx = bundles.indexOf(bundle)\n\n      if (bundle.require) {\n        addRollupTaskEntry('commonjs', bundle.runtime || ctx.runtime, {\n          path: `__$$bundle_cjs_${idx}$$__`,\n          source: bundle.source,\n          output: bundle.require,\n        })\n      }\n\n      if (bundle.import) {\n        addRollupTaskEntry('esm', bundle.runtime || ctx.runtime, {\n          path: `__$$bundle_esm_${idx}$$__`,\n          source: bundle.source,\n          output: bundle.import,\n        })\n      }\n    }\n\n    tasks.push(...Object.values(rollupTasks), ...Object.values(rollupLegacyTasks))\n\n    // Write legacy exports files\n    if (config?.legacyExports) {\n      for (const exp of exports) {\n        if (exp._exported && exp._path !== '.') {\n          const output = (exp.browser?.import || exp.import || '').replace(fileEnding, legacyEnding)\n          const relativeTargetPath = output.replace(/\\.[^/.]+$/, '')\n\n          if (relativeTargetPath) {\n            fs.writeFileSync(\n              path.resolve(cwd, `${exp._path}.js`),\n              ['// AUTO-GENERATED â€“ DO NOT EDIT', `export * from '${relativeTargetPath}'`, ''].join(\n                '\\n',\n              ),\n            )\n          }\n        }\n      }\n    }\n  }\n\n  return tasks\n}\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk'\n\nexport function createSpinner(msg: string): {complete: () => void; error: () => void} {\n  const startTime = Date.now()\n\n  console.log(msg)\n\n  return {\n    complete: () => {\n      console.log(`${chalk.green('[success]')} ${chalk.gray(`${Date.now() - startTime}ms`)}`)\n    },\n    error: () => {\n      console.log(`${chalk.red('[error]')} ${chalk.gray(`${Date.now() - startTime}ms`)}`)\n    },\n  }\n}\n","import path from 'node:path'\n\nimport rimraf from 'rimraf'\n\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {createLogger} from './logger'\nimport {resolveBuildContext} from './resolveBuildContext'\nimport {resolveBuildTasks} from './resolveBuildTasks'\nimport {createSpinner} from './spinner'\nimport {type BuildTask, buildTaskHandlers, type TaskHandler} from './tasks'\n\n/**\n * Build the distribution files of a npm package.\n *\n * @example\n * ```ts\n * import {build} from '@sanity/pkg-utils'\n *\n * build({\n *   cwd: process.cwd(),\n *   tsconfig: 'tsconfig.dist.json,\n * }).then(() => {\n *   console.log('successfully built')\n * }).catch((err) => {\n *   console.log(`build error: ${err.message}`)\n * })\n * ```\n *\n * @public\n */\nexport async function build(options: {\n  cwd: string\n  emitDeclarationOnly?: boolean\n  strict?: boolean\n  tsconfig?: string\n  clean?: boolean\n}): Promise<void> {\n  const {\n    cwd,\n    emitDeclarationOnly,\n    strict = false,\n    tsconfig: tsconfigOption,\n    clean = false,\n  } = options\n  const logger = createLogger()\n\n  const config = await loadConfig({cwd})\n\n  const legacyExports = config?.legacyExports ?? false\n  const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n\n  const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n\n  const ctx = await resolveBuildContext({\n    config,\n    cwd,\n    emitDeclarationOnly,\n    logger,\n    pkg,\n    strict,\n    tsconfig,\n  })\n\n  if (clean) {\n    logger.log(\n      `Deleting the \\`dist\\` folder: './${path.relative(cwd, ctx.distPath)}' before building...`,\n    )\n    await rimraf(ctx.distPath)\n  }\n\n  const buildTasks = resolveBuildTasks(ctx)\n\n  for (const task of buildTasks) {\n    const handler = buildTaskHandlers[task.type] as TaskHandler<BuildTask>\n    const taskName = handler.name(ctx, task)\n\n    const spinner = createSpinner(taskName)\n\n    try {\n      const result = await handler.exec(ctx, task).toPromise()\n\n      spinner.complete()\n      ctx.logger.log()\n\n      handler.complete(ctx, task, result)\n    } catch (err) {\n      spinner.error()\n\n      if (err instanceof Error) {\n        const RE_CWD = new RegExp(`${cwd}`, 'g')\n\n        ctx.logger.error(err.message.replace(RE_CWD, '.'))\n        ctx.logger.log()\n      }\n\n      handler.error(ctx, task, err)\n\n      process.exit(1)\n    }\n  }\n}\n"],"names":["exports","path","getTargetPaths","fileEnding","legacyEnding","fs","chalk","logger","createLogger","loadConfig","loadPkgWithReporting","resolveBuildContext","rimraf","buildTaskHandlers"],"mappings":"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"}