"use strict";
var cac = require("cac");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var cac__default = /* @__PURE__ */ _interopDefaultCompat(cac), version = "6.12.3";
const cli = cac__default.default();
cli.command("", "Check").alias("check").option("--strict", "Strict mode").option("--tsconfig [tsconfig]", "[string] tsconfig.json").action(async (options) => {
  const { checkAction } = await Promise.resolve().then(function() {
    return require("./_chunks-cjs/checkAction.cjs");
  });
  return checkAction(options);
});
cli.command("build", "Build package").option("--emitDeclarationOnly", "Emit d.ts only").option("--strict", "Strict mode").option("--tsconfig [tsconfig]", "[string] tsconfig.json").option("--check", "Run the check command after build (same as running `pkg build && pkg check`)").option("--clean", "Clean the dist directory before building").action(async (options) => {
  const { check = !1, ...buildOptions } = options, { buildAction } = await Promise.resolve().then(function() {
    return require("./_chunks-cjs/buildAction.cjs");
  });
  if (await buildAction(buildOptions), check) {
    const { checkAction } = await Promise.resolve().then(function() {
      return require("./_chunks-cjs/checkAction.cjs");
    });
    await checkAction({
      strict: options.strict,
      tsconfig: options.tsconfig
    });
  }
});
cli.command("init [path]", "Initialize package").action(async (p) => {
  const { initAction } = await Promise.resolve().then(function() {
    return require("./_chunks-cjs/initAction.cjs");
  });
  return initAction({
    path: p
  });
});
cli.command("watch", "Watch package").option("--strict", "Strict mode").option("--tsconfig [tsconfig]", "[string] tsconfig.json").action(async (options) => {
  const { watchAction } = await Promise.resolve().then(function() {
    return require("./_chunks-cjs/watchAction.cjs");
  });
  return watchAction(options);
});
cli.help();
cli.version(version);
cli.parse();
//# sourceMappingURL=cli.cjs.map
