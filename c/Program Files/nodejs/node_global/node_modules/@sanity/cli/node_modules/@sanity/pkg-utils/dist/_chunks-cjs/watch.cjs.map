{"version":3,"file":"watch.cjs","sources":["../../src/node/resolveWatchTasks.ts","../../src/node/globFiles.ts","../../src/node/watchFiles.ts","../../src/node/watchConfigFiles.ts","../../src/node/watch.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\n\nimport type {BuildContext, PkgExport, PkgFormat, PkgRuntime} from './core'\nimport type {DtsWatchTask, RollupTaskEntry, RollupWatchTask, WatchTask} from './tasks'\nimport {getTargetPaths} from './tasks/dts/getTargetPaths'\n\n/** @internal */\nexport function resolveWatchTasks(ctx: BuildContext): WatchTask[] {\n  const {config, cwd, pkg, target} = ctx\n  const tasks: WatchTask[] = []\n\n  const exports = Object.entries(ctx.exports || {}).map(\n    ([_path, exp]) => ({_path, ...exp}) as PkgExport & {_path: string},\n  )\n\n  const dtsTask: DtsWatchTask = {\n    type: 'watch:dts',\n    entries: [],\n  }\n\n  const rollupTasks: Record<string, RollupWatchTask> = {}\n\n  function addRollupTaskEntry(format: PkgFormat, runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `${format}:${runtime}`\n\n    if (rollupTasks[buildId]) {\n      rollupTasks[buildId].entries.push(entry)\n    } else {\n      rollupTasks[buildId] = {\n        type: 'watch:js',\n        buildId,\n        entries: [entry],\n        runtime,\n        format,\n        target: target[runtime],\n      }\n    }\n  }\n\n  // Parse `dts` tasks\n  for (const exp of exports) {\n    const importId = path.join(pkg.name, exp._path)\n\n    if (exp.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.source,\n        targetPaths: getTargetPaths(pkg.type, exp),\n      })\n    }\n\n    if (exp.browser?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.browser.source,\n        targetPaths: getTargetPaths(pkg.type, exp.browser),\n      })\n    }\n\n    if (exp.node?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.node.source,\n        targetPaths: getTargetPaths(pkg.type, exp.node),\n      })\n    }\n  }\n\n  // Parse rollup:commonjs:* tasks\n  for (const exp of exports) {\n    const output = exp.require\n\n    if (!output) continue\n\n    addRollupTaskEntry('commonjs', ctx.runtime, {\n      path: exp._path,\n      source: exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:commonjs:browser tasks\n  for (const exp of exports) {\n    const output = exp.browser?.require\n\n    if (!output) continue\n\n    addRollupTaskEntry('commonjs', 'browser', {\n      path: exp._path,\n      source: exp.browser?.source || exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:esm:* tasks\n  for (const exp of exports) {\n    const output = exp.import\n\n    if (!output) continue\n\n    addRollupTaskEntry('esm', ctx.runtime, {\n      path: exp._path,\n      source: exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:esm:browser tasks\n  for (const exp of exports) {\n    const output = exp.browser?.import\n\n    if (!output) continue\n\n    addRollupTaskEntry('esm', 'browser', {\n      path: exp._path,\n      source: exp.browser?.source || exp.source,\n      output,\n    })\n  }\n\n  if (dtsTask.entries.length) {\n    tasks.push(dtsTask)\n  }\n\n  tasks.push(...Object.values(rollupTasks))\n\n  // Write legacy exports files\n  if (config?.legacyExports) {\n    for (const exp of exports) {\n      if (exp._exported && exp._path !== '.') {\n        const relativeTargetPath = (exp.browser?.import || exp.import || '').replace(\n          /\\.[^/.]+$/,\n          '',\n        )\n\n        if (relativeTargetPath) {\n          fs.writeFileSync(\n            path.resolve(cwd, `${exp._path}.js`),\n            [`// AUTO-GENERATED â€“ DO NOT EDIT`, `export * from '${relativeTargetPath}'`, ``].join(\n              '\\n',\n            ),\n          )\n        }\n      }\n    }\n  }\n\n  return tasks\n}\n","import path from 'node:path'\n\nimport globby from 'globby'\n\nexport function globFiles(patterns: string[]): Promise<string[]> {\n  return globby(patterns.map((pattern) => pattern.split(path.sep).join(path.posix.sep)))\n}\n","import chokidar from 'chokidar'\nimport type {EventName} from 'chokidar/handler.js'\nimport {Observable} from 'rxjs'\n\nexport interface FileEvent {\n  type: EventName\n  file: string\n}\n\nexport function watchFiles(patterns: string[]): Observable<FileEvent> {\n  return new Observable((observer) => {\n    const watcher = chokidar.watch(patterns, {\n      ignoreInitial: true,\n    })\n\n    function handleFileEvent(type: EventName, file: string | Error) {\n      if (type === 'error' || file instanceof Error) {\n        observer.error(file)\n      } else {\n        observer.next({type, file})\n      }\n    }\n\n    watcher.on('all', handleFileEvent)\n\n    return () => {\n      watcher.off('all', handleFileEvent)\n      watcher.close()\n    }\n  })\n}\n","import path from 'node:path'\n\nimport type {Observable} from 'rxjs'\nimport {distinctUntilChanged, scan, startWith} from 'rxjs/operators'\n\nimport {globFiles} from './globFiles'\nimport type {Logger} from './logger'\nimport {watchFiles} from './watchFiles'\n\nexport async function watchConfigFiles(options: {\n  cwd: string\n  logger: Logger\n}): Promise<Observable<string[]>> {\n  const {cwd, logger} = options\n\n  const initialFiles = await globFiles([\n    path.resolve(cwd, 'package.json'),\n    path.resolve(cwd, 'package.config.cjs'),\n    path.resolve(cwd, 'package.config.js'),\n    path.resolve(cwd, 'package.config.ts'),\n  ])\n\n  const fileEvent$ = watchFiles([\n    path.resolve(cwd, 'package.json'),\n    path.resolve(cwd, 'package.config.cjs'),\n    path.resolve(cwd, 'package.config.js'),\n    path.resolve(cwd, 'package.config.ts'),\n  ])\n\n  return fileEvent$.pipe(\n    scan((files, fileEvent) => {\n      if (fileEvent.type === 'add') {\n        return files.concat(fileEvent.file)\n      }\n\n      if (fileEvent.type === 'unlink') {\n        return files.filter((f) => f !== fileEvent.file)\n      }\n\n      if (fileEvent.type === 'change') {\n        logger.log(\n          '--------------------------------------------------------------------------------',\n        )\n        logger.info(path.relative(cwd, fileEvent.file), 'changed')\n        logger.log('')\n\n        return files.slice(0) // trigger update\n      }\n\n      return files\n    }, initialFiles),\n    startWith(initialFiles),\n    distinctUntilChanged(),\n  )\n}\n","import path from 'node:path'\n\nimport {switchMap} from 'rxjs'\n\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {createLogger} from './logger'\nimport {resolveBuildContext} from './resolveBuildContext'\nimport {resolveWatchTasks} from './resolveWatchTasks'\nimport {type TaskHandler, type WatchTask, watchTaskHandlers} from './tasks'\nimport {watchConfigFiles} from './watchConfigFiles'\n\n/** @public */\nexport async function watch(options: {\n  cwd: string\n  strict?: boolean\n  tsconfig?: string\n}): Promise<void> {\n  const {cwd, strict = false, tsconfig: tsconfigOption} = options\n\n  const logger = createLogger()\n\n  const configFiles$ = await watchConfigFiles({cwd, logger})\n\n  const ctx$ = configFiles$.pipe(\n    switchMap(async (configFiles) => {\n      const files = configFiles.map((f) => path.relative(cwd, f))\n\n      const packageJsonPath = files.find((f) => f === 'package.json')\n\n      if (!packageJsonPath) {\n        throw new Error('missing package.json')\n      }\n\n      const config = await loadConfig({cwd})\n      const legacyExports = config?.legacyExports ?? false\n      const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n      const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n\n      return resolveBuildContext({config, cwd, logger, pkg, strict, tsconfig})\n    }),\n  )\n\n  ctx$.subscribe(async (ctx) => {\n    const watchTasks = resolveWatchTasks(ctx)\n\n    for (const task of watchTasks) {\n      const handler = watchTaskHandlers[task.type] as TaskHandler<WatchTask, unknown>\n      const result$ = handler.exec(ctx, task)\n\n      result$.subscribe({\n        error: (err) => {\n          ctx.logger.error(err)\n          ctx.logger.log()\n\n          process.exit(1)\n        },\n        next: (result) => {\n          handler.complete(ctx, task, result)\n        },\n        complete: () => {\n          ctx.logger.success(handler.name(ctx, task))\n          ctx.logger.log()\n        },\n      })\n    }\n  })\n}\n"],"names":["exports","path","getTargetPaths","fs","globby","Observable","chokidar","logger","scan","startWith","distinctUntilChanged","createLogger","switchMap","loadConfig","loadPkgWithReporting","resolveBuildContext","watchTaskHandlers"],"mappings":"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"}