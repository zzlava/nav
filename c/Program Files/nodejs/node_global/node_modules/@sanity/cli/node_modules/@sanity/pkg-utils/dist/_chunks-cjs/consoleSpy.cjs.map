{"version":3,"file":"consoleSpy.cjs","sources":["../../src/node/core/config/findConfigFile.ts","../../src/node/core/config/loadConfig.ts","../../src/node/core/config/resolveConfigProperty.ts","../../src/node/core/defaults.ts","../../src/node/core/pkg/loadPkg.ts","../../src/node/core/pkg/helpers.ts","../../src/node/core/pkg/loadPkgWithReporting.ts","../../src/node/tasks/dts/getTargetPaths.ts","../../src/node/core/pkg/pkgExt.ts","../../src/node/core/pkg/validateExports.ts","../../src/node/core/pkg/parseExports.ts","../../src/node/core/ts/loadTSConfig.ts","../../node_modules/.pnpm/browserslist-to-esbuild@2.1.1_browserslist@4.24.3/node_modules/browserslist-to-esbuild/src/index.js","../../src/node/core/findCommonPath.ts","../../src/node/resolveBrowserTarget.ts","../../src/node/resolveNodeTarget.ts","../../src/node/strict.ts","../../src/node/resolveBuildContext.ts","../../src/node/consoleSpy.ts"],"sourcesContent":["import path from 'node:path'\n\nimport findConfig from 'find-config'\n\nimport {fileExists} from '../../fileExists'\n\nconst CONFIG_FILE_NAMES = [\n  'package.config.ts',\n  'package.config.js',\n  'package.config.cjs',\n  'package.config.mjs',\n]\n\n/** @internal */\nexport function findConfigFile(cwd: string): string | undefined {\n  const pkgJsonPath = findConfig('package.json', {cwd})\n\n  if (!pkgJsonPath) return undefined\n\n  const pkgPath = path.dirname(pkgJsonPath)\n\n  for (const fileName of CONFIG_FILE_NAMES) {\n    const configPath = path.resolve(pkgPath, fileName)\n\n    const exists = fileExists(configPath)\n\n    if (exists) {\n      return configPath\n    }\n  }\n\n  return undefined\n}\n","import path from 'node:path'\n\nimport {register} from 'esbuild-register/dist/node'\nimport pkgUp from 'pkg-up'\n\nimport {findConfigFile} from './findConfigFile'\nimport type {PkgConfigOptions} from './types'\n\n/** @internal */\nexport async function loadConfig(options: {cwd: string}): Promise<PkgConfigOptions | undefined> {\n  const {cwd} = options\n\n  const pkgPath = await pkgUp({cwd})\n\n  if (!pkgPath) return undefined\n\n  const root = path.dirname(pkgPath)\n\n  const configFile = await findConfigFile(root)\n\n  if (!configFile) {\n    return undefined\n  }\n\n  // Do not accept config files outside of the root\n  if (!configFile.startsWith(cwd)) {\n    return undefined\n  }\n\n  const esbuildOptions = {extensions: ['.js', '.mjs', '.ts']}\n\n  const {unregister} = globalThis.__DEV__ ? {unregister: () => undefined} : register(esbuildOptions)\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const mod = require(configFile)\n\n  unregister()\n\n  return mod?.default || mod || undefined\n}\n","import type {PkgConfigProperty, PkgConfigPropertyResolver} from './types'\n\n/** @internal */\nexport function resolveConfigProperty<T>(\n  prop: PkgConfigProperty<T> | undefined,\n  initialValue: T,\n): T {\n  if (!prop) return initialValue\n\n  if (typeof prop === 'function') {\n    return (prop as PkgConfigPropertyResolver<T>)(initialValue)\n  }\n\n  return prop\n}\n","import config from '@sanity/browserslist-config'\n\n/** @public */\nexport const DEFAULT_BROWSERSLIST_QUERY = config\n","import fs from 'node:fs/promises'\n\nimport pkgUp from 'pkg-up'\n\nimport type {PackageJSON} from './types'\nimport {validatePkg} from './validatePkg'\n\n/** @internal */\nexport async function loadPkg(options: {cwd: string}): Promise<PackageJSON> {\n  const {cwd} = options\n\n  const pkgPath = await pkgUp({cwd})\n\n  if (!pkgPath) throw new Error('no package.json found')\n\n  const buf = await fs.readFile(pkgPath)\n\n  const raw = JSON.parse(buf.toString())\n\n  validatePkg(raw)\n\n  return raw\n}\n","/** @internal */\nexport function assertFirst<T>(a: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n\n  // if not found, then we don't care\n  if (aIdx === -1) {\n    return true\n  }\n\n  return aIdx === 0\n}\n\n/** @internal */\nexport function assertLast<T>(a: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n\n  // if not found, then we don't care\n  if (aIdx === -1) {\n    return true\n  }\n\n  return aIdx === arr.length - 1\n}\n\n/** @internal */\nexport function assertOrder<T>(a: T, b: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n  const bIdx = arr.indexOf(b)\n\n  // if either is not found, then we don't care\n  if (aIdx === -1 || bIdx === -1) {\n    return true\n  }\n\n  return aIdx < bIdx\n}\n","import chalk from 'chalk'\nimport {ZodError} from 'zod'\n\nimport type {Logger} from '../../logger'\nimport {assertLast, assertOrder} from './helpers'\nimport {loadPkg} from './loadPkg'\nimport type {PackageJSON} from './types'\n\n/** @internal */\nexport async function loadPkgWithReporting(options: {\n  cwd: string\n  logger: Logger\n  strict: boolean\n  legacyExports: boolean\n}): Promise<PackageJSON> {\n  const {cwd, logger, strict, legacyExports} = options\n\n  try {\n    const pkg = await loadPkg({cwd})\n    let shouldError = false\n\n    if (strict) {\n      if (legacyExports && pkg.type === 'commonjs') {\n        shouldError = true\n        logger.error(\n          `the \\`type\\` field in \\`./package.json\\` shouldn't be \"commonjs\" when \\`legacyExports\\` is set to true)`,\n        )\n      }\n\n      if (!legacyExports && !pkg.type) {\n        shouldError = true\n        logger.error(\n          `the \\`type\\` field in \\`./package.json\\` must be either \"module\" or \"commonjs\")`,\n        )\n      }\n    }\n\n    // validate exports\n    if (pkg.exports) {\n      const _exports = Object.entries(pkg.exports)\n\n      for (const [expPath, exp] of _exports) {\n        if (typeof exp === 'string' || 'svelte' in exp) {\n          continue\n        }\n\n        const keys = Object.keys(exp)\n\n        if (exp.types) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`types\\` condition shouldn't be used as dts files are generated in such a way that both CJS and ESM is supported`,\n          )\n        }\n\n        if (exp.module) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`module\\` condition shouldn't be used as it's not well supported in all bundlers.`,\n          )\n        }\n\n        if (exp.node) {\n          if (exp.import && exp.node.import && !assertOrder('node', 'import', keys)) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node\\` property should come before the \\`import\\` property`,\n            )\n          }\n\n          if (exp.node.module) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.module\\` condition shouldn't be used as it's not well supported in all bundlers. A better strategy is to refactor the codebase to no longer be vulnerable to the \"dual package hazard\"`,\n            )\n          }\n\n          if (\n            !exp.node.source &&\n            exp.node.import &&\n            (exp.node.require || exp.require) &&\n            (exp.node.import.endsWith('.cjs.js') || exp.node.import.endsWith('.cjs.mjs'))\n          ) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.import\\` re-export pattern shouldn't be used as it's not well supported in all bundlers. A better strategy is to refactor the codebase to no longer be vulnerable to the \"dual package hazard\"`,\n            )\n          }\n\n          if (exp.require && exp.node.require && exp.require === exp.node.require) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.require\\` property isn't necessary as it's identical to \\`require\\``,\n            )\n          } else if (exp.require && exp.node.require && !assertOrder('node', 'require', keys)) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node\\` property should come before the \\`require\\` property`,\n            )\n          }\n        } else {\n          if (!assertOrder('import', 'require', keys)) {\n            logger.warn(\n              `exports[\"${expPath}\"]: the \\`import\\` property should come before the \\`require\\` property`,\n            )\n          }\n        }\n\n        if (!assertLast('default', keys)) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`default\\` property should be the last property`,\n          )\n        }\n      }\n    }\n\n    if (shouldError) {\n      process.exit(1)\n    }\n\n    return pkg\n  } catch (err) {\n    if (err instanceof ZodError) {\n      for (const issue of err.issues) {\n        if (issue.code === 'invalid_type') {\n          logger.error(\n            [\n              `\\`${formatPath(issue.path)}\\` `,\n              `in \\`./package.json\\` must be of type ${chalk.magenta(issue.expected)} `,\n              `(received ${chalk.magenta(issue.received)})`,\n            ].join(''),\n          )\n          continue\n        }\n\n        logger.error(issue)\n      }\n    } else {\n      logger.error(err)\n    }\n\n    process.exit(1)\n  }\n}\n\nfunction formatPath(segments: Array<string | number>) {\n  return segments\n    .map((s, idx) => {\n      if (idx === 0) return s\n\n      if (typeof s === 'number') {\n        return `[${s}]`\n      }\n\n      if (s.startsWith('.')) {\n        return `[\"${s}\"]`\n      }\n\n      return `.${s}`\n    })\n    .join('')\n}\n","import type {PackageJSON, PkgBundle, PkgExport} from '../../core'\n\n/** @internal */\nexport const fileEnding = /\\.[mc]?js$/\n/** @internal */\nexport const dtsEnding = '.d.ts' as const\n/** @internal */\nexport const defaultEnding = '.js' as const\n/** @internal */\nexport const legacyEnding = `.esm${defaultEnding}` as const\n/** @internal */\nexport const mjsEnding = '.mjs' as const\n/** @internal */\nexport const cjsEnding = '.cjs' as const\nconst mtsEnding = '.d.mts' as const\nconst ctsEnding = '.d.cts' as const\n\n/** @internal */\nexport function getTargetPaths(\n  _type: PackageJSON['type'],\n  expOrBundle: PkgExport | PkgExport['browser'] | PkgExport['node'] | PkgBundle,\n): string[] {\n  const type = (_type === 'module' ? 'module' : 'commonjs') satisfies PackageJSON['type']\n\n  const set = new Set<string>()\n\n  if (expOrBundle?.import) {\n    set.add(expOrBundle.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding))\n  }\n\n  if (expOrBundle?.require) {\n    set.add(expOrBundle.require.replace(fileEnding, type === 'commonjs' ? dtsEnding : ctsEnding))\n  }\n\n  if (isPkgExport(expOrBundle)) {\n    if (!expOrBundle.browser?.source) {\n      if (expOrBundle.browser?.import) {\n        set.add(\n          expOrBundle.browser.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding),\n        )\n      }\n\n      if (expOrBundle.browser?.require) {\n        set.add(\n          expOrBundle.browser.require.replace(\n            fileEnding,\n            type === 'commonjs' ? dtsEnding : ctsEnding,\n          ),\n        )\n      }\n    }\n\n    if (!expOrBundle.node?.source) {\n      if (expOrBundle.node?.import) {\n        set.add(\n          expOrBundle.node.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding),\n        )\n      }\n\n      if (expOrBundle.node?.require) {\n        set.add(\n          expOrBundle.node.require.replace(fileEnding, type === 'commonjs' ? dtsEnding : ctsEnding),\n        )\n      }\n    }\n\n    if (!expOrBundle['react-compiler']?.source) {\n      if (expOrBundle['react-compiler']?.default) {\n        set.add(\n          expOrBundle['react-compiler'].default.replace(\n            fileEnding,\n            type === 'module' ? dtsEnding : mtsEnding,\n          ),\n        )\n      }\n    }\n  }\n\n  return Array.from(set)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isPkgExport(exp: any): exp is PkgExport {\n  return exp?.browser || exp?.node || exp?.default\n}\n","import {cjsEnding, defaultEnding, legacyEnding, mjsEnding} from '../../tasks/dts/getTargetPaths'\n\n/** @internal */\nexport interface PkgExtMap {\n  commonjs: {commonjs: string; esm: string}\n  module: {commonjs: string; esm: string}\n  legacy: string\n}\n\n/** @internal */\nexport const pkgExtMap = {\n  // pkg.type: \"commonjs\"\n  commonjs: {\n    commonjs: defaultEnding,\n    esm: mjsEnding,\n  },\n\n  // pkg.type: \"module\"\n  module: {\n    commonjs: cjsEnding,\n    esm: defaultEnding,\n  },\n  // package.config.legacyExports: true\n  legacy: legacyEnding,\n} satisfies PkgExtMap\n","import type {PkgExport} from '../config'\nimport {pkgExtMap as extMap} from './pkgExt'\nimport type {PackageJSON} from './types'\n\nexport function validateExports(\n  _exports: (PkgExport & {_path: string})[],\n  options: {pkg: PackageJSON},\n): string[] {\n  const {pkg} = options\n  const type = pkg.type || 'commonjs'\n  const ext = extMap[type]\n\n  const errors: string[] = []\n\n  // @TODO validate that no exports declare the legacy exports\n  for (const exp of _exports) {\n    if (exp.require && !exp.require.endsWith(ext.commonjs)) {\n      errors.push(\n        `package.json with \\`type: \"${type}\"\\` - \\`exports[\"${exp._path}\"].require\\` must end with \"${ext.commonjs}\"`,\n      )\n    }\n\n    if (exp.import && !exp.import.endsWith(ext.esm)) {\n      errors.push(\n        `package.json with \\`type: \"${type}\"\\` - \\`exports[\"${exp._path}\"].import\\` must end with \"${ext.esm}\"`,\n      )\n    }\n  }\n\n  return errors\n}\n","import {existsSync} from 'node:fs'\nimport {resolve as resolvePath} from 'node:path'\n\nimport type {Logger} from '../../logger'\nimport type {InferredStrictOptions} from '../../strict'\nimport {defaultEnding, fileEnding, legacyEnding} from '../../tasks/dts/getTargetPaths'\nimport type {PkgExport} from '../config'\nimport {isRecord} from '../isRecord'\nimport {pkgExtMap} from './pkgExt'\nimport type {PackageJSON} from './types'\nimport {validateExports} from './validateExports'\n\n/** @internal */\nexport function parseExports(options: {\n  cwd: string\n  pkg: PackageJSON\n  strict: boolean\n  strictOptions: InferredStrictOptions\n  legacyExports: boolean\n  logger: Logger\n}): (PkgExport & {_path: string})[] {\n  const {cwd, pkg, strict, strictOptions, legacyExports, logger} = options\n  const type = pkg.type || 'commonjs'\n  const errors: string[] = []\n\n  const report = (kind: 'warn' | 'error', message: string) => {\n    if (kind === 'warn') {\n      logger.warn(message)\n    } else {\n      errors.push(message)\n    }\n  }\n\n  if (!pkg.main && strict && strictOptions.alwaysPackageJsonMain !== 'off') {\n    report(strictOptions.alwaysPackageJsonMain, 'package.json: `main` must be declared')\n  }\n\n  if (!Array.isArray(pkg.files) && strict && strictOptions.alwaysPackageJsonFiles !== 'off') {\n    report(\n      strictOptions.alwaysPackageJsonFiles,\n      'package.json: `files` should be used over `.npmignore`',\n    )\n  }\n\n  if (pkg.source) {\n    if (\n      strict &&\n      pkg.exports?.['.'] &&\n      typeof pkg.exports['.'] === 'object' &&\n      'source' in pkg.exports['.'] &&\n      pkg.exports['.'].source === pkg.source\n    ) {\n      errors.push(\n        'package.json: the \"source\" property can be removed, as it is equal to exports[\".\"].source.',\n      )\n    } else if (!pkg.exports && pkg.main) {\n      const extMap = pkgExtMap[type]\n      const importExport = pkg.main.replace(fileEnding, extMap.esm)\n      const requireExport = pkg.main.replace(fileEnding, extMap.commonjs)\n      const defaultExport = pkg.main.replace(fileEnding, defaultEnding)\n\n      const maybeBrowserCondition = []\n\n      if (pkg.browser) {\n        const browserConditions = []\n\n        if (pkg.module && pkg.browser?.[pkg.module]) {\n          browserConditions.push(\n            `      \"import\": ${JSON.stringify(pkg.browser[pkg.module].replace(fileEnding, extMap.esm))}`,\n          )\n        } else if (pkg.browser?.[pkg.main]) {\n          browserConditions.push(\n            `      \"import\": ${JSON.stringify(pkg.browser?.[pkg.main].replace(fileEnding, extMap.esm))}`,\n          )\n        } else if (legacyExports) {\n          const browserImport = pkg.main.replace(fileEnding, `.browser${extMap.esm}`)\n\n          browserConditions.push(`      \"import\": ${JSON.stringify(browserImport)}`)\n        }\n\n        if (pkg.browser?.[pkg.main]) {\n          browserConditions.push(\n            `      \"require\": ${JSON.stringify(pkg.browser[pkg.main].replace(fileEnding, extMap.commonjs))}`,\n          )\n        } else if (legacyExports) {\n          const browserRequire = pkg.main.replace(fileEnding, `.browser${extMap.commonjs}`)\n\n          browserConditions.push(`      \"require\": ${JSON.stringify(browserRequire)}`)\n        }\n\n        if (browserConditions.length) {\n          maybeBrowserCondition.push(\n            `    \"browser\": {`,\n            `      \"source\": ${JSON.stringify(pkg.browser?.[pkg.source] || pkg.source)},`,\n            ...browserConditions,\n            `    }`,\n          )\n        }\n      }\n\n      errors.push(\n        ...([\n          'package.json: `exports` are missing, it should be:',\n          `\"exports\": {`,\n          `  \".\": {`,\n          `    \"source\": ${JSON.stringify(pkg.source)},`,\n          // If browser conditions are detected then add them to the suggestion\n          ...(maybeBrowserCondition.length > 0 ? maybeBrowserCondition : []),\n          // If legacy exports are enabled we suggest the full list of exports, if not we can use the terse version\n          (legacyExports || type === 'commonjs') &&\n            `    \"import\": ${JSON.stringify(importExport)},`,\n          (legacyExports || type === 'module') &&\n            `    \"require\": ${JSON.stringify(requireExport)},`,\n          `    \"default\": ${JSON.stringify(defaultExport)}`,\n          `  },`,\n          `  \"./package.json\": \"./package.json\"`,\n          `}`,\n        ].filter(Boolean) as string[]),\n      )\n    }\n  }\n\n  if (errors.length) {\n    throw new Error('\\n- ' + errors.join('\\n- '))\n  }\n\n  if (!pkg.exports) {\n    throw new Error(\n      '\\n- ' +\n        [\n          'package.json: `exports` are missing, please set a minimal configuration, for example:',\n          `\"exports\": {`,\n          `  \".\": {`,\n          `    \"source\": \"./src/index.js\",`,\n          `    \"default\": \"./dist/index.js\"`,\n          `  },`,\n          `  \"./package.json\": \"./package.json\"`,\n          `}`,\n        ].join('\\n- '),\n    )\n  }\n\n  const _exports: (PkgExport & {_path: string})[] = []\n\n  // @TODO validate typesVersions when legacyExports is true\n\n  if (strict && strictOptions.noPackageJsonTypings !== 'off' && 'typings' in pkg) {\n    report(strictOptions.noPackageJsonTypings, 'package.json: `typings` should be `types`')\n  }\n\n  if (\n    strict &&\n    strictOptions.alwaysPackageJsonTypes !== 'off' &&\n    !pkg.types &&\n    typeof pkg.exports?.['.'] === 'object' &&\n    'source' in pkg.exports['.'] &&\n    pkg.exports['.'].source?.endsWith('.ts')\n  ) {\n    report(\n      strictOptions.alwaysPackageJsonTypes,\n      'package.json: `types` must be declared for the npm listing to show as a TypeScript module.',\n    )\n  }\n\n  if (strict && !pkg.exports['./package.json']) {\n    errors.push('package.json: `exports[\"./package.json\"] must be declared.')\n  }\n\n  for (const [exportPath, exportEntry] of Object.entries(pkg.exports)) {\n    if (\n      exportPath.endsWith('.json') ||\n      (typeof exportEntry === 'string' && exportEntry.endsWith('.json'))\n    ) {\n      if (exportPath === './package.json') {\n        if (exportEntry !== './package.json') {\n          errors.push('package.json: `exports[\"./package.json\"]` must be \"./package.json\".')\n        }\n      }\n    } else if (exportPath.endsWith('.css')) {\n      if (typeof exportEntry === 'string' && !existsSync(resolvePath(cwd, exportEntry))) {\n        errors.push(\n          `package.json: \\`exports[${JSON.stringify(exportPath)}]\\`: file does not exist.`,\n        )\n      } else if (typeof exportEntry !== 'string') {\n        errors.push(\n          `package.json: \\`exports[${JSON.stringify(exportPath)}]\\`: export conditions not supported for CSS files.`,\n        )\n      }\n    } else if (isRecord(exportEntry) && 'svelte' in exportEntry) {\n      // @TODO should we report a warning or a debug message here about a detected svelte export that is ignored?\n    } else if (isPkgExport(exportEntry)) {\n      const exp = {\n        _exported: true,\n        _path: exportPath,\n        ...exportEntry,\n      } satisfies PkgExport & {_path: string}\n\n      // Infer the `default` condition based on the `type` and other conditions\n      if (!exp.default) {\n        const fallback = type === 'module' ? exp.import : exp.require\n\n        if (fallback) {\n          exp.default = fallback\n        }\n\n        if (legacyExports) {\n          if (fallback) {\n            errors.push(\n              `package.json - \\`exports[\"${exp._path}\"].default\\` should be set to \"${fallback}\" when \"legacyExports\" is true`,\n            )\n          } else {\n            errors.push(\n              `package.json - \\`exports[\"${exp._path}\"].default\\` should be specified when \"legacyExports\" is true`,\n            )\n          }\n        }\n      }\n\n      // Infer the `require` condition based on the `type` and other conditions\n      if (!exp.require && type === 'commonjs' && exp.default) {\n        exp.require = exp.default\n      }\n\n      // Infer the `import` condition based on the `type` and other conditions\n      if (!exp.import && type === 'module' && exp.default) {\n        exp.import = exp.default\n      }\n\n      if (exportPath === '.') {\n        if (exportEntry.require && pkg.main && exportEntry.require !== pkg.main) {\n          errors.push(\n            'package.json: mismatch between \"main\" and \"exports.require\". These must be equal.',\n          )\n        }\n\n        if (legacyExports) {\n          const indexLegacyExport = (exportEntry.import || exportEntry.require || '').replace(\n            /(\\.esm)?\\.[mc]?js$/,\n            legacyEnding,\n          )\n\n          if (indexLegacyExport !== pkg.module) {\n            errors.push(\n              `package.json: \"module\" should be \"${indexLegacyExport}\" when \"legacyExports\" is true`,\n            )\n          }\n        } else {\n          if (exportEntry.import && pkg.module && exportEntry.import !== pkg.module) {\n            errors.push(\n              'package.json: mismatch between \"module\" and \"exports.import\" These must be equal.',\n            )\n          }\n        }\n      }\n\n      _exports.push(exp)\n    } else if (!isRecord(exportEntry)) {\n      errors.push('package.json: exports must be an object')\n    }\n  }\n\n  errors.push(...validateExports(_exports, {pkg}))\n\n  if (errors.length) {\n    throw new Error('\\n- ' + errors.join('\\n- '))\n  }\n\n  return _exports\n}\n\nfunction isPkgExport(value: unknown): value is PkgExport {\n  return isRecord(value) && 'source' in value && typeof value['source'] === 'string'\n}\n","import ts from 'typescript'\n\n/** @internal */\nexport async function loadTSConfig(options: {\n  cwd: string\n  tsconfigPath: string\n}): Promise<ts.ParsedCommandLine | undefined> {\n  const {cwd, tsconfigPath} = options\n\n  const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, tsconfigPath)\n\n  if (!configPath) {\n    return undefined\n  }\n\n  const configFile = ts.readConfigFile(configPath, ts.sys.readFile)\n\n  return ts.parseJsonConfigFileContent(configFile.config, ts.sys, cwd)\n}\n","import browserslist from 'browserslist'\n\n// convert the browserslist field in package.json to\n// esbuild compatible array of browsers\nexport default function browserslistToEsbuild(browserslistConfig, options = {}) {\n  if (!browserslistConfig) {\n    // the path from where the script is run\n    const path = process.cwd()\n\n    // read config if none is passed\n    browserslistConfig = browserslist.loadConfig({ path, ...options })\n  }\n\n  const SUPPORTED_ESBUILD_TARGETS = [\n    'es',\n    'chrome',\n    'edge',\n    'firefox',\n    'ios',\n    'node',\n    'safari',\n    'opera',\n    'ie',\n  ]\n\n  // https://github.com/eBay/browserslist-config/issues/16#issuecomment-863870093\n  const UNSUPPORTED = ['android 4']\n\n  const replaces = {\n    ios_saf: 'ios',\n    android: 'chrome',\n  }\n\n  const separator = ' '\n\n  return (\n    browserslist(browserslistConfig, options)\n      // filter out the unsupported ones\n      .filter((b) => !UNSUPPORTED.some((u) => b.startsWith(u)))\n      // replaces safari TP with latest safari version\n      .map((b) => {\n        if (b === 'safari TP') {\n          return browserslist('last 1 safari version')[0]\n        }\n\n        return b\n      })\n      // transform into ['chrome', '88']\n      .map((b) => b.split(separator))\n      // replace the similar browser\n      .map((b) => {\n        if (replaces[b[0]]) {\n          b[0] = replaces[b[0]]\n        }\n\n        return b\n      })\n      // 11.0-12.0 --> 11.0\n      .map((b) => {\n        if (b[1].includes('-')) {\n          b[1] = b[1].slice(0, b[1].indexOf('-'))\n        }\n\n        return b\n      })\n      // 11.0 --> 11\n      .map((b) => {\n        if (b[1].endsWith('.0')) {\n          b[1] = b[1].slice(0, -2)\n        }\n\n        return b\n      })\n      // removes invalid versions that will break esbuild\n      // https://github.com/evanw/esbuild/blob/35c0d65b9d4f29a26176404d2890d1b499634e9f/compat-table/src/caniuse.ts#L119-L122\n      .filter((b) => /^\\d+(\\.\\d+)*$/.test(b[1]))\n      // only get the targets supported by esbuild\n      .filter((b) => SUPPORTED_ESBUILD_TARGETS.includes(b[0]))\n      // only get the oldest version, assuming that the older version\n      // is last in the array\n      .reduce((acc, b) => {\n        const existingIndex = acc.findIndex((br) => br[0] === b[0])\n\n        if (existingIndex !== -1) {\n          acc[existingIndex][1] = b[1]\n        } else {\n          acc.push(b)\n        }\n        return acc\n      }, [])\n      // remove separator\n      .map((b) => b.join(''))\n  )\n}\n","import path from 'node:path'\n\nexport function pathContains(containerPath: string, itemPath: string): boolean {\n  return !path.relative(containerPath, itemPath).startsWith('..')\n}\n\nexport function findCommonDirPath(filePaths: string[]): string | undefined {\n  let ret: string | undefined = undefined\n\n  for (const filePath of filePaths) {\n    let dirPath = path.dirname(filePath)\n\n    if (!ret) {\n      ret = dirPath\n      continue\n    }\n\n    while (dirPath !== ret) {\n      dirPath = path.dirname(dirPath)\n\n      if (dirPath === ret) {\n        break\n      }\n\n      if (pathContains(dirPath, ret)) {\n        ret = dirPath\n        break\n      }\n\n      if (dirPath === '.') return undefined\n    }\n  }\n\n  return ret\n}\n","export function resolveBrowserTarget(versions: string[]): string[] | undefined {\n  const target: string[] = versions.filter(\n    (version) =>\n      version.startsWith('chrome') ||\n      version.startsWith('edge') ||\n      version.startsWith('firefox') ||\n      version.startsWith('ios') ||\n      version.startsWith('safari') ||\n      version.startsWith('opera'),\n  )\n\n  if (target.length === 0) {\n    return undefined\n  }\n\n  return target\n}\n","export function resolveNodeTarget(versions: string[]): string[] | undefined {\n  const target: string[] = versions.filter((version) => version.startsWith('node'))\n\n  if (target.length === 0) {\n    return undefined\n  }\n\n  return target\n}\n","import {z} from 'zod'\nimport {errorMap} from 'zod-validation-error'\n\n/**\n * @public\n */\nexport const toggle = z.union([z.literal('error'), z.literal('warn'), z.literal('off')])\n\n/**\n * @public\n */\nexport type ToggleType = z.infer<typeof toggle>\n\n/**\n * @public\n */\nexport const strictOptions = z\n  .object({\n    noPackageJsonTypings: toggle.default('error'),\n    noImplicitSideEffects: toggle.default('warn'),\n    noImplicitBrowsersList: toggle.default('warn'),\n    alwaysPackageJsonTypes: toggle.default('error'),\n    alwaysPackageJsonMain: toggle.default('error'),\n    alwaysPackageJsonFiles: toggle.default('error'),\n  })\n  .strict()\n\n/**\n * To make error message paths line up with the paths in package.config.ts the schema is hoisted into a root schema\n * This way errors will say `Expected boolean, received string at \"strict.noPackageJsonTypings\"` instead of `Expected boolean, received string at \"noPackageJsonTypings\"`.\n */\nconst validationSchema = z.object({\n  strictOptions: strictOptions.default({}),\n})\n\n/**\n * @public\n */\nexport type InferredStrictOptions = z.infer<typeof strictOptions>\n\n/**\n * @public\n */\nexport interface StrictOptions {\n  /**\n   * Disallows a top level `typings` field in `package.json` if it is equal to `exports['.'].source`.\n   * @defaultValue 'error'\n   */\n  noPackageJsonTypings?: ToggleType\n  /**\n   * Requires specifying `sideEffects` in `package.json`.\n   * @defaultValue 'warn'\n   */\n  noImplicitSideEffects?: ToggleType\n  /**\n   * Requires specifying `browserslist` in `package.json`, instead of relying on it implicitly being:\n   * @example\n   * ```\n   * \"browserslist\": \"extends @sanity/browserslist-config\"\n   * ```\n   * @defaultValue 'warn'\n   */\n  noImplicitBrowsersList?: ToggleType\n  /**\n   * If typescript is used then `types` in `package.json` should be specified for npm listings to show the TS icon.\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonTypes?: ToggleType\n  /**\n   * A lot of analysis tooling requiers the `main` field to work (like bundlephobia) and so it's best practice to always include it\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonMain?: ToggleType\n  /**\n   * Using `.npmignore` is error prone, it's best practice to always declare `files` instead\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonFiles?: ToggleType\n}\n\n/** @internal */\nexport function parseStrictOptions(input: unknown): InferredStrictOptions {\n  return validationSchema.parse({strictOptions: input}, {errorMap}).strictOptions\n}\n","import path from 'node:path'\n\nimport browserslistToEsbuild from 'browserslist-to-esbuild'\n\nimport {\n  type BuildContext,\n  DEFAULT_BROWSERSLIST_QUERY,\n  loadTSConfig,\n  type PackageJSON,\n  parseExports,\n  type PkgConfigOptions,\n  type PkgExports,\n  type PkgRuntime,\n  resolveConfigProperty,\n} from './core'\nimport {findCommonDirPath, pathContains} from './core/findCommonPath'\nimport type {Logger} from './logger'\nimport {resolveBrowserTarget} from './resolveBrowserTarget'\nimport {resolveNodeTarget} from './resolveNodeTarget'\nimport {parseStrictOptions} from './strict'\n\nexport async function resolveBuildContext(options: {\n  config?: PkgConfigOptions\n  cwd: string\n  emitDeclarationOnly?: boolean\n  logger: Logger\n  pkg: PackageJSON\n  strict: boolean\n  tsconfig: string\n}): Promise<BuildContext> {\n  const {\n    config,\n    cwd,\n    emitDeclarationOnly = false,\n    logger,\n    pkg,\n    strict,\n    tsconfig: tsconfigPath,\n  } = options\n  const tsconfig = await loadTSConfig({cwd, tsconfigPath})\n  const strictOptions = parseStrictOptions(config?.strictOptions ?? {})\n\n  /* eslint-disable padding-line-between-statements */\n  let browserslist = pkg.browserslist\n  if (!browserslist) {\n    if (strict && strictOptions.noImplicitBrowsersList !== 'off') {\n      if (strictOptions.noImplicitBrowsersList === 'error') {\n        throw new Error(\n          '\\n- ' +\n            `package.json: \"browserslist\" is missing, set it to \\`\"browserslist\": \"extends @sanity/browserslist-config\"\\``,\n        )\n      } else {\n        logger.warn(\n          'Could not detect a `browserslist` property in `package.json`, using default configuration. Add `\"browserslist\": \"extends @sanity/browserslist-config\"` to silence this warning.',\n        )\n      }\n    }\n    browserslist = DEFAULT_BROWSERSLIST_QUERY\n  }\n  const targetVersions = browserslistToEsbuild(browserslist)\n  /* eslint-enable padding-line-between-statements */\n\n  if (\n    strict &&\n    strictOptions.noImplicitSideEffects !== 'off' &&\n    typeof pkg.sideEffects === 'undefined'\n  ) {\n    const msg =\n      'package.json: `sideEffects` is missing, see https://webpack.js.org/guides/tree-shaking/#clarifying-tree-shaking-and-sideeffects for how to define `sideEffects`'\n\n    if (strictOptions.noImplicitSideEffects === 'error') {\n      throw new Error(msg)\n    } else {\n      logger.warn(msg)\n    }\n  }\n\n  const nodeTarget = resolveNodeTarget(targetVersions)\n  const webTarget = resolveBrowserTarget(targetVersions)\n\n  if (!nodeTarget) {\n    throw new Error('no matching `node` target')\n  }\n\n  if (!webTarget) {\n    throw new Error('no matching `web` target')\n  }\n\n  const target: Record<PkgRuntime, string[]> = {\n    '*': webTarget.concat(nodeTarget),\n    'browser': webTarget,\n    'node': nodeTarget,\n  }\n\n  const parsedExports = parseExports({\n    cwd,\n    pkg,\n    strict,\n    legacyExports: config?.legacyExports ?? false,\n    strictOptions,\n    logger,\n  }).reduce<PkgExports>((acc, x) => {\n    const {_path: exportPath, ...exportEntry} = x\n\n    return {...acc, [exportPath]: exportEntry}\n  }, {})\n\n  const exports = resolveConfigProperty(config?.exports, parsedExports)\n\n  const parsedExternal = [\n    ...(pkg.dependencies ? Object.keys(pkg.dependencies) : []),\n    ...(pkg.peerDependencies ? Object.keys(pkg.peerDependencies) : []),\n  ]\n\n  // Merge externals if an array is provided, replace if it's a function\n  const external =\n    config && Array.isArray(config.external)\n      ? [...parsedExternal, ...config.external]\n      : resolveConfigProperty(config?.external, parsedExternal)\n  // Merge bundledPackages with dev deps, replace if it's a function\n  const externalWithTypes = new Set([pkg.name, ...external, ...external.map(transformPackageName)])\n  const bundledDependencies = [\n    ...(pkg.devDependencies ? Object.keys(pkg.devDependencies) : []),\n  ].filter(\n    // Do not bundle anything that is marked as external\n    (_) => !externalWithTypes.has(_),\n  )\n  const bundledPackages =\n    config && Array.isArray(config.extract?.bundledPackages)\n      ? [...bundledDependencies, ...config.extract.bundledPackages]\n      : resolveConfigProperty(config?.extract?.bundledPackages, bundledDependencies)\n\n  const outputPaths = Object.values(exports)\n    .flatMap((exportEntry) => {\n      return [\n        exportEntry.import,\n        exportEntry.require,\n        exportEntry.browser?.import,\n        exportEntry.browser?.require,\n        exportEntry.node?.source && exportEntry.node.import,\n        exportEntry.node?.source && exportEntry.node.require,\n        // @TODO implement this\n        // exportEntry['react-compiler']?.source && exportEntry['react-compiler']?.default,\n      ].filter(Boolean) as string[]\n    })\n    .map((p) => path.resolve(cwd, p))\n\n  const commonDistPath = findCommonDirPath(outputPaths)\n\n  if (commonDistPath === cwd) {\n    throw new Error(\n      'all output files must share a common parent directory which is not the root package directory',\n    )\n  }\n\n  if (commonDistPath && !pathContains(cwd, commonDistPath)) {\n    throw new Error('all output files must be located within the package')\n  }\n\n  const configDistPath = config?.dist ? path.resolve(cwd, config.dist) : undefined\n\n  if (\n    configDistPath &&\n    commonDistPath &&\n    configDistPath !== commonDistPath &&\n    !pathContains(configDistPath, commonDistPath)\n  ) {\n    logger.log(`did you mean to configure \\`dist: './${path.relative(cwd, commonDistPath)}'\\`?`)\n\n    throw new Error('all output files must be located with the configured `dist` path')\n  }\n\n  const distPath = configDistPath || commonDistPath\n\n  if (!distPath) {\n    throw new Error('could not detect `dist` path')\n  }\n\n  const ctx: BuildContext = {\n    config,\n    cwd,\n    distPath,\n    emitDeclarationOnly,\n    exports,\n    external,\n    bundledPackages,\n    files: [],\n    logger,\n    pkg,\n    runtime: config?.runtime ?? '*',\n    strict,\n    target,\n    ts: {\n      config: tsconfig,\n      configPath: tsconfigPath,\n    },\n  }\n\n  return ctx\n}\n\nfunction transformPackageName(packageName: string): string {\n  if (packageName.startsWith('@types/')) {\n    // If it already starts with @types, return it as is\n    return packageName\n  } else if (packageName.startsWith('@')) {\n    // Handle scoped packages\n    const [scope, name] = packageName.split('/')\n\n    return `@types/${scope.slice(1)}__${name}`\n  } else {\n    // Handle regular packages\n    return `@types/${packageName}`\n  }\n}\n","/* eslint-disable no-console */\n\nexport interface ConsoleSpyMsg {\n  type: 'log' | 'warn' | 'error'\n  code?: string\n  args: unknown[]\n}\n\nexport interface ConsoleSpy {\n  messages: ConsoleSpyMsg[]\n  restore: () => void\n}\n\nexport function createConsoleSpy(options?: {\n  onRestored?: (messages: ConsoleSpyMsg[]) => void\n}): ConsoleSpy {\n  const {onRestored} = options || {}\n\n  const original = {\n    log: console.log,\n    warn: console.warn,\n    error: console.error,\n  }\n\n  const messages: ConsoleSpyMsg[] = []\n\n  console.log = (...args: unknown[]) => messages.push({type: 'log', args})\n  console.warn = (...args: unknown[]) => messages.push({type: 'warn', args})\n  console.error = (...args: unknown[]) => messages.push({type: 'error', args})\n\n  return {\n    messages,\n    restore: () => {\n      console.log = original.log\n      console.warn = original.warn\n      console.error = original.error\n\n      onRestored?.(messages)\n    },\n  }\n}\n"],"names":["findConfig","path","fileExists","pkgUp","register","config","fs","validatePkg","logger","ZodError","chalk","isPkgExport","extMap","strictOptions","existsSync","resolvePath","isRecord","ts","browserslist","z","errorMap","exports"],"mappings":"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","x_google_ignoreList":[12]}