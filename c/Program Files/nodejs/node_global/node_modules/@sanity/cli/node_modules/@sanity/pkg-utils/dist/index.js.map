{"version":3,"file":"index.js","sources":["../src/node/core/config/defineConfig.ts","../src/node/fileExists.ts","../src/node/core/config/findConfigFile.ts","../src/node/core/config/loadConfig.ts","../src/node/core/config/resolveConfigProperty.ts","../src/node/core/defaults.ts","../src/node/core/isRecord.ts","../src/node/core/pkg/validatePkg.ts","../src/node/core/pkg/loadPkg.ts","../src/node/core/pkg/helpers.ts","../src/node/core/pkg/loadPkgWithReporting.ts","../src/node/tasks/dts/getTargetPaths.ts","../src/node/core/pkg/pkgExt.ts","../src/node/core/pkg/validateExports.ts","../src/node/core/pkg/parseExports.ts","../src/node/core/template/createFromTemplate.ts","../src/node/core/template/define.ts","../src/node/core/ts/loadTSConfig.ts","../src/node/logger.ts","../node_modules/.pnpm/browserslist-to-esbuild@2.1.1_browserslist@4.24.3/node_modules/browserslist-to-esbuild/src/index.js","../src/node/core/findCommonPath.ts","../src/node/resolveBrowserTarget.ts","../src/node/resolveNodeTarget.ts","../src/node/strict.ts","../src/node/resolveBuildContext.ts","../src/node/resolveBuildTasks.ts","../src/node/spinner.ts","../src/node/printExtractMessages.ts","../src/node/tasks/dts/printDiagnostic.ts","../src/node/tasks/dts/buildTypes.ts","../src/node/tasks/dts/DtsError.ts","../src/node/tasks/dts/createApiExtractorConfig.ts","../src/node/tasks/dts/createTSDocConfig.ts","../src/node/tasks/dts/extractModuleBlocks.ts","../src/node/tasks/dts/getExtractMessagesConfig.ts","../src/node/tasks/dts/extractTypes.ts","../src/node/tasks/dts/doExtract.ts","../src/node/tasks/dts/dtsTask.ts","../src/node/tasks/dts/dtsWatchTask.ts","../src/node/consoleSpy.ts","../src/node/tasks/rollup/resolveRollupConfig.ts","../src/node/tasks/rollup/rollupLegacyTask.ts","../src/node/tasks/rollup/rollupReactCompilerTask.ts","../src/node/tasks/rollup/rollupTask.ts","../src/node/tasks/rollup/rollupWatchTask.ts","../src/node/tasks/index.ts","../src/node/build.ts","../src/node/getFilesize.ts","../src/node/printPackageTree.ts","../src/node/check.ts","../src/node/isEmptyDirectory.ts","../node_modules/.pnpm/@sanity+prettier-config@1.0.3_prettier@3.4.2/node_modules/@sanity/prettier-config/dist/index.js","../src/node/templates/default/template.ts","../src/node/init.ts","../src/node/resolveWatchTasks.ts","../src/node/globFiles.ts","../src/node/watchFiles.ts","../src/node/watchConfigFiles.ts","../src/node/watch.ts"],"sourcesContent":["import type {PkgConfigOptions} from './types'\n\n/** @public */\nexport function defineConfig<const T extends PkgConfigOptions>(configOptions: T): T {\n  return configOptions\n}\n","import {statSync} from 'node:fs'\n\n/** @internal */\nexport function fileExists(filePath: string): boolean {\n  try {\n    statSync(filePath)\n\n    return true\n  } catch (_) {\n    return false\n  }\n}\n","import path from 'node:path'\n\nimport findConfig from 'find-config'\n\nimport {fileExists} from '../../fileExists'\n\nconst CONFIG_FILE_NAMES = [\n  'package.config.ts',\n  'package.config.js',\n  'package.config.cjs',\n  'package.config.mjs',\n]\n\n/** @internal */\nexport function findConfigFile(cwd: string): string | undefined {\n  const pkgJsonPath = findConfig('package.json', {cwd})\n\n  if (!pkgJsonPath) return undefined\n\n  const pkgPath = path.dirname(pkgJsonPath)\n\n  for (const fileName of CONFIG_FILE_NAMES) {\n    const configPath = path.resolve(pkgPath, fileName)\n\n    const exists = fileExists(configPath)\n\n    if (exists) {\n      return configPath\n    }\n  }\n\n  return undefined\n}\n","import path from 'node:path'\n\nimport {register} from 'esbuild-register/dist/node'\nimport pkgUp from 'pkg-up'\n\nimport {findConfigFile} from './findConfigFile'\nimport type {PkgConfigOptions} from './types'\n\n/** @internal */\nexport async function loadConfig(options: {cwd: string}): Promise<PkgConfigOptions | undefined> {\n  const {cwd} = options\n\n  const pkgPath = await pkgUp({cwd})\n\n  if (!pkgPath) return undefined\n\n  const root = path.dirname(pkgPath)\n\n  const configFile = await findConfigFile(root)\n\n  if (!configFile) {\n    return undefined\n  }\n\n  // Do not accept config files outside of the root\n  if (!configFile.startsWith(cwd)) {\n    return undefined\n  }\n\n  const esbuildOptions = {extensions: ['.js', '.mjs', '.ts']}\n\n  const {unregister} = globalThis.__DEV__ ? {unregister: () => undefined} : register(esbuildOptions)\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const mod = require(configFile)\n\n  unregister()\n\n  return mod?.default || mod || undefined\n}\n","import type {PkgConfigProperty, PkgConfigPropertyResolver} from './types'\n\n/** @internal */\nexport function resolveConfigProperty<T>(\n  prop: PkgConfigProperty<T> | undefined,\n  initialValue: T,\n): T {\n  if (!prop) return initialValue\n\n  if (typeof prop === 'function') {\n    return (prop as PkgConfigPropertyResolver<T>)(initialValue)\n  }\n\n  return prop\n}\n","import config from '@sanity/browserslist-config'\n\n/** @public */\nexport const DEFAULT_BROWSERSLIST_QUERY = config\n","/** @internal */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && !Array.isArray(value) && typeof value === 'object'\n}\n","import {z} from 'zod'\n\nimport type {PackageJSON} from './types'\n\nconst pkgSchema = z.object({\n  type: z.optional(z.enum(['commonjs', 'module'])),\n  name: z.string(),\n  version: z.string(),\n  license: z.string(),\n  bin: z.optional(z.record(z.string())),\n  dependencies: z.optional(z.record(z.string())),\n  devDependencies: z.optional(z.record(z.string())),\n  peerDependencies: z.optional(z.record(z.string())),\n  source: z.optional(z.string()),\n  main: z.optional(z.string()),\n  browser: z.optional(z.record(z.string())),\n  module: z.optional(z.string()),\n  types: z.optional(z.string()),\n  exports: z.optional(\n    z.record(\n      z.union([\n        z.custom<`./${string}.json`>((val) => /^\\.\\/.*\\.json$/.test(val as string)),\n        z.custom<`./${string}.css`>((val) => /^\\.\\/.*\\.css$/.test(val as string)),\n        z.object({\n          'types': z.optional(z.string()),\n          'source': z.optional(z.string()),\n          'browser': z.optional(\n            z.object({\n              source: z.string(),\n              import: z.optional(z.string()),\n              require: z.optional(z.string()),\n            }),\n          ),\n          'react-compiler': z.optional(\n            // z.union([\n            // @TODO add support for a string shortcut\n            // z.string(),\n            z.object({\n              source: z.optional(z.string()),\n              default: z.string(),\n            }),\n            // ]),\n          ),\n          'node': z.optional(\n            z.object({\n              source: z.optional(z.string()),\n              import: z.optional(z.string()),\n              require: z.optional(z.string()),\n            }),\n          ),\n          'import': z.optional(z.string()),\n          'require': z.optional(z.string()),\n          'default': z.string(),\n        }),\n        z.object({\n          types: z.optional(z.string()),\n          svelte: z.string(),\n          default: z.optional(z.string()),\n        }),\n      ]),\n    ),\n  ),\n  browserslist: z.optional(z.union([z.string(), z.array(z.string())])),\n  sideEffects: z.optional(z.union([z.boolean(), z.array(z.string())])),\n  // @TODO type this properly\n  typesVersions: z.optional(z.any()),\n})\n\n// Create a map over known keys to catch casing mistakes\nconst typoMap = new Map<string, string>()\n\nfor (const key of pkgSchema.keyof()._def.values) {\n  typoMap.set(key.toUpperCase(), key)\n}\n\nexport function validatePkg(input: unknown): PackageJSON {\n  const pkg = pkgSchema.parse(input)\n\n  const invalidKey = Object.keys(input as PackageJSON).find((key) => {\n    const needle = key.toUpperCase()\n\n    return typoMap.has(needle) ? typoMap.get(needle) !== key : false\n  })\n\n  if (invalidKey) {\n    throw new TypeError(\n      `\n- package.json: \"${invalidKey}\" is not a valid key. Did you mean \"${typoMap.get(invalidKey.toUpperCase())}\"?`,\n    )\n  }\n\n  return pkg\n}\n","import fs from 'node:fs/promises'\n\nimport pkgUp from 'pkg-up'\n\nimport type {PackageJSON} from './types'\nimport {validatePkg} from './validatePkg'\n\n/** @internal */\nexport async function loadPkg(options: {cwd: string}): Promise<PackageJSON> {\n  const {cwd} = options\n\n  const pkgPath = await pkgUp({cwd})\n\n  if (!pkgPath) throw new Error('no package.json found')\n\n  const buf = await fs.readFile(pkgPath)\n\n  const raw = JSON.parse(buf.toString())\n\n  validatePkg(raw)\n\n  return raw\n}\n","/** @internal */\nexport function assertFirst<T>(a: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n\n  // if not found, then we don't care\n  if (aIdx === -1) {\n    return true\n  }\n\n  return aIdx === 0\n}\n\n/** @internal */\nexport function assertLast<T>(a: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n\n  // if not found, then we don't care\n  if (aIdx === -1) {\n    return true\n  }\n\n  return aIdx === arr.length - 1\n}\n\n/** @internal */\nexport function assertOrder<T>(a: T, b: T, arr: T[]): boolean {\n  const aIdx = arr.indexOf(a)\n  const bIdx = arr.indexOf(b)\n\n  // if either is not found, then we don't care\n  if (aIdx === -1 || bIdx === -1) {\n    return true\n  }\n\n  return aIdx < bIdx\n}\n","import chalk from 'chalk'\nimport {ZodError} from 'zod'\n\nimport type {Logger} from '../../logger'\nimport {assertLast, assertOrder} from './helpers'\nimport {loadPkg} from './loadPkg'\nimport type {PackageJSON} from './types'\n\n/** @internal */\nexport async function loadPkgWithReporting(options: {\n  cwd: string\n  logger: Logger\n  strict: boolean\n  legacyExports: boolean\n}): Promise<PackageJSON> {\n  const {cwd, logger, strict, legacyExports} = options\n\n  try {\n    const pkg = await loadPkg({cwd})\n    let shouldError = false\n\n    if (strict) {\n      if (legacyExports && pkg.type === 'commonjs') {\n        shouldError = true\n        logger.error(\n          `the \\`type\\` field in \\`./package.json\\` shouldn't be \"commonjs\" when \\`legacyExports\\` is set to true)`,\n        )\n      }\n\n      if (!legacyExports && !pkg.type) {\n        shouldError = true\n        logger.error(\n          `the \\`type\\` field in \\`./package.json\\` must be either \"module\" or \"commonjs\")`,\n        )\n      }\n    }\n\n    // validate exports\n    if (pkg.exports) {\n      const _exports = Object.entries(pkg.exports)\n\n      for (const [expPath, exp] of _exports) {\n        if (typeof exp === 'string' || 'svelte' in exp) {\n          continue\n        }\n\n        const keys = Object.keys(exp)\n\n        if (exp.types) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`types\\` condition shouldn't be used as dts files are generated in such a way that both CJS and ESM is supported`,\n          )\n        }\n\n        if (exp.module) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`module\\` condition shouldn't be used as it's not well supported in all bundlers.`,\n          )\n        }\n\n        if (exp.node) {\n          if (exp.import && exp.node.import && !assertOrder('node', 'import', keys)) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node\\` property should come before the \\`import\\` property`,\n            )\n          }\n\n          if (exp.node.module) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.module\\` condition shouldn't be used as it's not well supported in all bundlers. A better strategy is to refactor the codebase to no longer be vulnerable to the \"dual package hazard\"`,\n            )\n          }\n\n          if (\n            !exp.node.source &&\n            exp.node.import &&\n            (exp.node.require || exp.require) &&\n            (exp.node.import.endsWith('.cjs.js') || exp.node.import.endsWith('.cjs.mjs'))\n          ) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.import\\` re-export pattern shouldn't be used as it's not well supported in all bundlers. A better strategy is to refactor the codebase to no longer be vulnerable to the \"dual package hazard\"`,\n            )\n          }\n\n          if (exp.require && exp.node.require && exp.require === exp.node.require) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node.require\\` property isn't necessary as it's identical to \\`require\\``,\n            )\n          } else if (exp.require && exp.node.require && !assertOrder('node', 'require', keys)) {\n            shouldError = true\n            logger.error(\n              `exports[\"${expPath}\"]: the \\`node\\` property should come before the \\`require\\` property`,\n            )\n          }\n        } else {\n          if (!assertOrder('import', 'require', keys)) {\n            logger.warn(\n              `exports[\"${expPath}\"]: the \\`import\\` property should come before the \\`require\\` property`,\n            )\n          }\n        }\n\n        if (!assertLast('default', keys)) {\n          shouldError = true\n          logger.error(\n            `exports[\"${expPath}\"]: the \\`default\\` property should be the last property`,\n          )\n        }\n      }\n    }\n\n    if (shouldError) {\n      process.exit(1)\n    }\n\n    return pkg\n  } catch (err) {\n    if (err instanceof ZodError) {\n      for (const issue of err.issues) {\n        if (issue.code === 'invalid_type') {\n          logger.error(\n            [\n              `\\`${formatPath(issue.path)}\\` `,\n              `in \\`./package.json\\` must be of type ${chalk.magenta(issue.expected)} `,\n              `(received ${chalk.magenta(issue.received)})`,\n            ].join(''),\n          )\n          continue\n        }\n\n        logger.error(issue)\n      }\n    } else {\n      logger.error(err)\n    }\n\n    process.exit(1)\n  }\n}\n\nfunction formatPath(segments: Array<string | number>) {\n  return segments\n    .map((s, idx) => {\n      if (idx === 0) return s\n\n      if (typeof s === 'number') {\n        return `[${s}]`\n      }\n\n      if (s.startsWith('.')) {\n        return `[\"${s}\"]`\n      }\n\n      return `.${s}`\n    })\n    .join('')\n}\n","import type {PackageJSON, PkgBundle, PkgExport} from '../../core'\n\n/** @internal */\nexport const fileEnding = /\\.[mc]?js$/\n/** @internal */\nexport const dtsEnding = '.d.ts' as const\n/** @internal */\nexport const defaultEnding = '.js' as const\n/** @internal */\nexport const legacyEnding = `.esm${defaultEnding}` as const\n/** @internal */\nexport const mjsEnding = '.mjs' as const\n/** @internal */\nexport const cjsEnding = '.cjs' as const\nconst mtsEnding = '.d.mts' as const\nconst ctsEnding = '.d.cts' as const\n\n/** @internal */\nexport function getTargetPaths(\n  _type: PackageJSON['type'],\n  expOrBundle: PkgExport | PkgExport['browser'] | PkgExport['node'] | PkgBundle,\n): string[] {\n  const type = (_type === 'module' ? 'module' : 'commonjs') satisfies PackageJSON['type']\n\n  const set = new Set<string>()\n\n  if (expOrBundle?.import) {\n    set.add(expOrBundle.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding))\n  }\n\n  if (expOrBundle?.require) {\n    set.add(expOrBundle.require.replace(fileEnding, type === 'commonjs' ? dtsEnding : ctsEnding))\n  }\n\n  if (isPkgExport(expOrBundle)) {\n    if (!expOrBundle.browser?.source) {\n      if (expOrBundle.browser?.import) {\n        set.add(\n          expOrBundle.browser.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding),\n        )\n      }\n\n      if (expOrBundle.browser?.require) {\n        set.add(\n          expOrBundle.browser.require.replace(\n            fileEnding,\n            type === 'commonjs' ? dtsEnding : ctsEnding,\n          ),\n        )\n      }\n    }\n\n    if (!expOrBundle.node?.source) {\n      if (expOrBundle.node?.import) {\n        set.add(\n          expOrBundle.node.import.replace(fileEnding, type === 'module' ? dtsEnding : mtsEnding),\n        )\n      }\n\n      if (expOrBundle.node?.require) {\n        set.add(\n          expOrBundle.node.require.replace(fileEnding, type === 'commonjs' ? dtsEnding : ctsEnding),\n        )\n      }\n    }\n\n    if (!expOrBundle['react-compiler']?.source) {\n      if (expOrBundle['react-compiler']?.default) {\n        set.add(\n          expOrBundle['react-compiler'].default.replace(\n            fileEnding,\n            type === 'module' ? dtsEnding : mtsEnding,\n          ),\n        )\n      }\n    }\n  }\n\n  return Array.from(set)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isPkgExport(exp: any): exp is PkgExport {\n  return exp?.browser || exp?.node || exp?.default\n}\n","import {cjsEnding, defaultEnding, legacyEnding, mjsEnding} from '../../tasks/dts/getTargetPaths'\n\n/** @internal */\nexport interface PkgExtMap {\n  commonjs: {commonjs: string; esm: string}\n  module: {commonjs: string; esm: string}\n  legacy: string\n}\n\n/** @internal */\nexport const pkgExtMap = {\n  // pkg.type: \"commonjs\"\n  commonjs: {\n    commonjs: defaultEnding,\n    esm: mjsEnding,\n  },\n\n  // pkg.type: \"module\"\n  module: {\n    commonjs: cjsEnding,\n    esm: defaultEnding,\n  },\n  // package.config.legacyExports: true\n  legacy: legacyEnding,\n} satisfies PkgExtMap\n","import type {PkgExport} from '../config'\nimport {pkgExtMap as extMap} from './pkgExt'\nimport type {PackageJSON} from './types'\n\nexport function validateExports(\n  _exports: (PkgExport & {_path: string})[],\n  options: {pkg: PackageJSON},\n): string[] {\n  const {pkg} = options\n  const type = pkg.type || 'commonjs'\n  const ext = extMap[type]\n\n  const errors: string[] = []\n\n  // @TODO validate that no exports declare the legacy exports\n  for (const exp of _exports) {\n    if (exp.require && !exp.require.endsWith(ext.commonjs)) {\n      errors.push(\n        `package.json with \\`type: \"${type}\"\\` - \\`exports[\"${exp._path}\"].require\\` must end with \"${ext.commonjs}\"`,\n      )\n    }\n\n    if (exp.import && !exp.import.endsWith(ext.esm)) {\n      errors.push(\n        `package.json with \\`type: \"${type}\"\\` - \\`exports[\"${exp._path}\"].import\\` must end with \"${ext.esm}\"`,\n      )\n    }\n  }\n\n  return errors\n}\n","import {existsSync} from 'node:fs'\nimport {resolve as resolvePath} from 'node:path'\n\nimport type {Logger} from '../../logger'\nimport type {InferredStrictOptions} from '../../strict'\nimport {defaultEnding, fileEnding, legacyEnding} from '../../tasks/dts/getTargetPaths'\nimport type {PkgExport} from '../config'\nimport {isRecord} from '../isRecord'\nimport {pkgExtMap} from './pkgExt'\nimport type {PackageJSON} from './types'\nimport {validateExports} from './validateExports'\n\n/** @internal */\nexport function parseExports(options: {\n  cwd: string\n  pkg: PackageJSON\n  strict: boolean\n  strictOptions: InferredStrictOptions\n  legacyExports: boolean\n  logger: Logger\n}): (PkgExport & {_path: string})[] {\n  const {cwd, pkg, strict, strictOptions, legacyExports, logger} = options\n  const type = pkg.type || 'commonjs'\n  const errors: string[] = []\n\n  const report = (kind: 'warn' | 'error', message: string) => {\n    if (kind === 'warn') {\n      logger.warn(message)\n    } else {\n      errors.push(message)\n    }\n  }\n\n  if (!pkg.main && strict && strictOptions.alwaysPackageJsonMain !== 'off') {\n    report(strictOptions.alwaysPackageJsonMain, 'package.json: `main` must be declared')\n  }\n\n  if (!Array.isArray(pkg.files) && strict && strictOptions.alwaysPackageJsonFiles !== 'off') {\n    report(\n      strictOptions.alwaysPackageJsonFiles,\n      'package.json: `files` should be used over `.npmignore`',\n    )\n  }\n\n  if (pkg.source) {\n    if (\n      strict &&\n      pkg.exports?.['.'] &&\n      typeof pkg.exports['.'] === 'object' &&\n      'source' in pkg.exports['.'] &&\n      pkg.exports['.'].source === pkg.source\n    ) {\n      errors.push(\n        'package.json: the \"source\" property can be removed, as it is equal to exports[\".\"].source.',\n      )\n    } else if (!pkg.exports && pkg.main) {\n      const extMap = pkgExtMap[type]\n      const importExport = pkg.main.replace(fileEnding, extMap.esm)\n      const requireExport = pkg.main.replace(fileEnding, extMap.commonjs)\n      const defaultExport = pkg.main.replace(fileEnding, defaultEnding)\n\n      const maybeBrowserCondition = []\n\n      if (pkg.browser) {\n        const browserConditions = []\n\n        if (pkg.module && pkg.browser?.[pkg.module]) {\n          browserConditions.push(\n            `      \"import\": ${JSON.stringify(pkg.browser[pkg.module].replace(fileEnding, extMap.esm))}`,\n          )\n        } else if (pkg.browser?.[pkg.main]) {\n          browserConditions.push(\n            `      \"import\": ${JSON.stringify(pkg.browser?.[pkg.main].replace(fileEnding, extMap.esm))}`,\n          )\n        } else if (legacyExports) {\n          const browserImport = pkg.main.replace(fileEnding, `.browser${extMap.esm}`)\n\n          browserConditions.push(`      \"import\": ${JSON.stringify(browserImport)}`)\n        }\n\n        if (pkg.browser?.[pkg.main]) {\n          browserConditions.push(\n            `      \"require\": ${JSON.stringify(pkg.browser[pkg.main].replace(fileEnding, extMap.commonjs))}`,\n          )\n        } else if (legacyExports) {\n          const browserRequire = pkg.main.replace(fileEnding, `.browser${extMap.commonjs}`)\n\n          browserConditions.push(`      \"require\": ${JSON.stringify(browserRequire)}`)\n        }\n\n        if (browserConditions.length) {\n          maybeBrowserCondition.push(\n            `    \"browser\": {`,\n            `      \"source\": ${JSON.stringify(pkg.browser?.[pkg.source] || pkg.source)},`,\n            ...browserConditions,\n            `    }`,\n          )\n        }\n      }\n\n      errors.push(\n        ...([\n          'package.json: `exports` are missing, it should be:',\n          `\"exports\": {`,\n          `  \".\": {`,\n          `    \"source\": ${JSON.stringify(pkg.source)},`,\n          // If browser conditions are detected then add them to the suggestion\n          ...(maybeBrowserCondition.length > 0 ? maybeBrowserCondition : []),\n          // If legacy exports are enabled we suggest the full list of exports, if not we can use the terse version\n          (legacyExports || type === 'commonjs') &&\n            `    \"import\": ${JSON.stringify(importExport)},`,\n          (legacyExports || type === 'module') &&\n            `    \"require\": ${JSON.stringify(requireExport)},`,\n          `    \"default\": ${JSON.stringify(defaultExport)}`,\n          `  },`,\n          `  \"./package.json\": \"./package.json\"`,\n          `}`,\n        ].filter(Boolean) as string[]),\n      )\n    }\n  }\n\n  if (errors.length) {\n    throw new Error('\\n- ' + errors.join('\\n- '))\n  }\n\n  if (!pkg.exports) {\n    throw new Error(\n      '\\n- ' +\n        [\n          'package.json: `exports` are missing, please set a minimal configuration, for example:',\n          `\"exports\": {`,\n          `  \".\": {`,\n          `    \"source\": \"./src/index.js\",`,\n          `    \"default\": \"./dist/index.js\"`,\n          `  },`,\n          `  \"./package.json\": \"./package.json\"`,\n          `}`,\n        ].join('\\n- '),\n    )\n  }\n\n  const _exports: (PkgExport & {_path: string})[] = []\n\n  // @TODO validate typesVersions when legacyExports is true\n\n  if (strict && strictOptions.noPackageJsonTypings !== 'off' && 'typings' in pkg) {\n    report(strictOptions.noPackageJsonTypings, 'package.json: `typings` should be `types`')\n  }\n\n  if (\n    strict &&\n    strictOptions.alwaysPackageJsonTypes !== 'off' &&\n    !pkg.types &&\n    typeof pkg.exports?.['.'] === 'object' &&\n    'source' in pkg.exports['.'] &&\n    pkg.exports['.'].source?.endsWith('.ts')\n  ) {\n    report(\n      strictOptions.alwaysPackageJsonTypes,\n      'package.json: `types` must be declared for the npm listing to show as a TypeScript module.',\n    )\n  }\n\n  if (strict && !pkg.exports['./package.json']) {\n    errors.push('package.json: `exports[\"./package.json\"] must be declared.')\n  }\n\n  for (const [exportPath, exportEntry] of Object.entries(pkg.exports)) {\n    if (\n      exportPath.endsWith('.json') ||\n      (typeof exportEntry === 'string' && exportEntry.endsWith('.json'))\n    ) {\n      if (exportPath === './package.json') {\n        if (exportEntry !== './package.json') {\n          errors.push('package.json: `exports[\"./package.json\"]` must be \"./package.json\".')\n        }\n      }\n    } else if (exportPath.endsWith('.css')) {\n      if (typeof exportEntry === 'string' && !existsSync(resolvePath(cwd, exportEntry))) {\n        errors.push(\n          `package.json: \\`exports[${JSON.stringify(exportPath)}]\\`: file does not exist.`,\n        )\n      } else if (typeof exportEntry !== 'string') {\n        errors.push(\n          `package.json: \\`exports[${JSON.stringify(exportPath)}]\\`: export conditions not supported for CSS files.`,\n        )\n      }\n    } else if (isRecord(exportEntry) && 'svelte' in exportEntry) {\n      // @TODO should we report a warning or a debug message here about a detected svelte export that is ignored?\n    } else if (isPkgExport(exportEntry)) {\n      const exp = {\n        _exported: true,\n        _path: exportPath,\n        ...exportEntry,\n      } satisfies PkgExport & {_path: string}\n\n      // Infer the `default` condition based on the `type` and other conditions\n      if (!exp.default) {\n        const fallback = type === 'module' ? exp.import : exp.require\n\n        if (fallback) {\n          exp.default = fallback\n        }\n\n        if (legacyExports) {\n          if (fallback) {\n            errors.push(\n              `package.json - \\`exports[\"${exp._path}\"].default\\` should be set to \"${fallback}\" when \"legacyExports\" is true`,\n            )\n          } else {\n            errors.push(\n              `package.json - \\`exports[\"${exp._path}\"].default\\` should be specified when \"legacyExports\" is true`,\n            )\n          }\n        }\n      }\n\n      // Infer the `require` condition based on the `type` and other conditions\n      if (!exp.require && type === 'commonjs' && exp.default) {\n        exp.require = exp.default\n      }\n\n      // Infer the `import` condition based on the `type` and other conditions\n      if (!exp.import && type === 'module' && exp.default) {\n        exp.import = exp.default\n      }\n\n      if (exportPath === '.') {\n        if (exportEntry.require && pkg.main && exportEntry.require !== pkg.main) {\n          errors.push(\n            'package.json: mismatch between \"main\" and \"exports.require\". These must be equal.',\n          )\n        }\n\n        if (legacyExports) {\n          const indexLegacyExport = (exportEntry.import || exportEntry.require || '').replace(\n            /(\\.esm)?\\.[mc]?js$/,\n            legacyEnding,\n          )\n\n          if (indexLegacyExport !== pkg.module) {\n            errors.push(\n              `package.json: \"module\" should be \"${indexLegacyExport}\" when \"legacyExports\" is true`,\n            )\n          }\n        } else {\n          if (exportEntry.import && pkg.module && exportEntry.import !== pkg.module) {\n            errors.push(\n              'package.json: mismatch between \"module\" and \"exports.import\" These must be equal.',\n            )\n          }\n        }\n      }\n\n      _exports.push(exp)\n    } else if (!isRecord(exportEntry)) {\n      errors.push('package.json: exports must be an object')\n    }\n  }\n\n  errors.push(...validateExports(_exports, {pkg}))\n\n  if (errors.length) {\n    throw new Error('\\n- ' + errors.join('\\n- '))\n  }\n\n  return _exports\n}\n\nfunction isPkgExport(value: unknown): value is PkgExport {\n  return isRecord(value) && 'source' in value && typeof value['source'] === 'string'\n}\n","import {writeFile} from 'node:fs/promises'\nimport {dirname, relative, resolve} from 'node:path'\n\nimport {mkdirp} from 'mkdirp'\nimport prompts from 'prompts'\n\nimport type {Logger} from '../../logger'\nimport type {PkgTemplate} from './types'\n\nconst promptsTypes = {\n  string: 'text' as const,\n}\n\n/** @internal */\nexport async function createFromTemplate(options: {\n  cwd: string\n  logger: Logger\n  packagePath: string\n  template: PkgTemplate\n}): Promise<void> {\n  const {cwd, logger, packagePath, template: templateOrResolver} = options\n\n  const template =\n    typeof templateOrResolver === 'function'\n      ? await templateOrResolver({cwd, logger, packagePath})\n      : templateOrResolver\n\n  logger.log('create new package at', relative(cwd, packagePath))\n\n  const templateOptions: Record<string, string> = {}\n\n  for (const templateOption of template.options) {\n    const templateValidate = templateOption.validate\n\n    const res = await prompts(\n      {\n        type: promptsTypes[templateOption.type],\n        name: templateOption.name,\n        message: templateOption.description,\n        validate: templateValidate ? (prev) => templateValidate(prev) : undefined,\n        initial:\n          typeof templateOption.initial === 'function'\n            ? templateOption.initial(templateOptions)\n            : templateOption.initial,\n      },\n      {onCancel: () => process.exit(0)},\n    )\n\n    templateOptions[templateOption.name] = templateOption.parse\n      ? templateOption.parse(res[templateOption.name])\n      : res[templateOption.name]\n  }\n\n  const features: Record<string, boolean> = {}\n\n  for (const templateFeature of template.features) {\n    const res = templateFeature.optional\n      ? await prompts(\n          {\n            type: 'confirm',\n            name: 'confirm',\n            message: `use ${templateFeature.name}?`,\n            initial: templateFeature.initial,\n          },\n          {onCancel: () => process.exit(0)},\n        )\n      : undefined\n\n    features[templateFeature.name] = res?.confirm || !templateFeature.optional\n  }\n\n  const files = await template.getFiles(templateOptions, features)\n\n  files.sort((a, b) => {\n    return a.name.localeCompare(b.name)\n  })\n\n  for (const file of files) {\n    const filePath = resolve(packagePath, file.name)\n\n    await mkdirp(dirname(filePath))\n    await writeFile(filePath, file.contents.trim() + '\\n')\n\n    logger.success(`wrote ${relative(cwd, filePath)}`)\n  }\n}\n","import type {PkgTemplateOption} from './types'\n\n/** @public */\nexport function defineTemplateOption<T>(option: PkgTemplateOption<T>): PkgTemplateOption<T> {\n  return option\n}\n","import ts from 'typescript'\n\n/** @internal */\nexport async function loadTSConfig(options: {\n  cwd: string\n  tsconfigPath: string\n}): Promise<ts.ParsedCommandLine | undefined> {\n  const {cwd, tsconfigPath} = options\n\n  const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, tsconfigPath)\n\n  if (!configPath) {\n    return undefined\n  }\n\n  const configFile = ts.readConfigFile(configPath, ts.sys.readFile)\n\n  return ts.parseJsonConfigFileContent(configFile.config, ts.sys, cwd)\n}\n","import chalk from 'chalk'\n\n/** @internal */\nexport interface Logger {\n  log: (...args: unknown[]) => void\n  info: (...args: unknown[]) => void\n  warn: (...args: unknown[]) => void\n  error: (...args: unknown[]) => void\n  success: (...args: unknown[]) => void\n}\n\n/** @internal */\nexport function createLogger(): Logger {\n  return {\n    /* eslint-disable no-console */\n    log: (...args) => {\n      console.log(...args)\n    },\n    info: (...args) => {\n      console.log(chalk.blue('[info]'), ...args)\n    },\n    warn: (...args) => {\n      console.log(chalk.yellow('[warning]'), ...args)\n    },\n    error: (...args) => {\n      console.log(chalk.red('[error]'), ...args)\n    },\n    success: (...args) => {\n      console.log(chalk.green('[success]'), ...args)\n    },\n    /* eslint-enable no-console */\n  }\n}\n","import browserslist from 'browserslist'\n\n// convert the browserslist field in package.json to\n// esbuild compatible array of browsers\nexport default function browserslistToEsbuild(browserslistConfig, options = {}) {\n  if (!browserslistConfig) {\n    // the path from where the script is run\n    const path = process.cwd()\n\n    // read config if none is passed\n    browserslistConfig = browserslist.loadConfig({ path, ...options })\n  }\n\n  const SUPPORTED_ESBUILD_TARGETS = [\n    'es',\n    'chrome',\n    'edge',\n    'firefox',\n    'ios',\n    'node',\n    'safari',\n    'opera',\n    'ie',\n  ]\n\n  // https://github.com/eBay/browserslist-config/issues/16#issuecomment-863870093\n  const UNSUPPORTED = ['android 4']\n\n  const replaces = {\n    ios_saf: 'ios',\n    android: 'chrome',\n  }\n\n  const separator = ' '\n\n  return (\n    browserslist(browserslistConfig, options)\n      // filter out the unsupported ones\n      .filter((b) => !UNSUPPORTED.some((u) => b.startsWith(u)))\n      // replaces safari TP with latest safari version\n      .map((b) => {\n        if (b === 'safari TP') {\n          return browserslist('last 1 safari version')[0]\n        }\n\n        return b\n      })\n      // transform into ['chrome', '88']\n      .map((b) => b.split(separator))\n      // replace the similar browser\n      .map((b) => {\n        if (replaces[b[0]]) {\n          b[0] = replaces[b[0]]\n        }\n\n        return b\n      })\n      // 11.0-12.0 --> 11.0\n      .map((b) => {\n        if (b[1].includes('-')) {\n          b[1] = b[1].slice(0, b[1].indexOf('-'))\n        }\n\n        return b\n      })\n      // 11.0 --> 11\n      .map((b) => {\n        if (b[1].endsWith('.0')) {\n          b[1] = b[1].slice(0, -2)\n        }\n\n        return b\n      })\n      // removes invalid versions that will break esbuild\n      // https://github.com/evanw/esbuild/blob/35c0d65b9d4f29a26176404d2890d1b499634e9f/compat-table/src/caniuse.ts#L119-L122\n      .filter((b) => /^\\d+(\\.\\d+)*$/.test(b[1]))\n      // only get the targets supported by esbuild\n      .filter((b) => SUPPORTED_ESBUILD_TARGETS.includes(b[0]))\n      // only get the oldest version, assuming that the older version\n      // is last in the array\n      .reduce((acc, b) => {\n        const existingIndex = acc.findIndex((br) => br[0] === b[0])\n\n        if (existingIndex !== -1) {\n          acc[existingIndex][1] = b[1]\n        } else {\n          acc.push(b)\n        }\n        return acc\n      }, [])\n      // remove separator\n      .map((b) => b.join(''))\n  )\n}\n","import path from 'node:path'\n\nexport function pathContains(containerPath: string, itemPath: string): boolean {\n  return !path.relative(containerPath, itemPath).startsWith('..')\n}\n\nexport function findCommonDirPath(filePaths: string[]): string | undefined {\n  let ret: string | undefined = undefined\n\n  for (const filePath of filePaths) {\n    let dirPath = path.dirname(filePath)\n\n    if (!ret) {\n      ret = dirPath\n      continue\n    }\n\n    while (dirPath !== ret) {\n      dirPath = path.dirname(dirPath)\n\n      if (dirPath === ret) {\n        break\n      }\n\n      if (pathContains(dirPath, ret)) {\n        ret = dirPath\n        break\n      }\n\n      if (dirPath === '.') return undefined\n    }\n  }\n\n  return ret\n}\n","export function resolveBrowserTarget(versions: string[]): string[] | undefined {\n  const target: string[] = versions.filter(\n    (version) =>\n      version.startsWith('chrome') ||\n      version.startsWith('edge') ||\n      version.startsWith('firefox') ||\n      version.startsWith('ios') ||\n      version.startsWith('safari') ||\n      version.startsWith('opera'),\n  )\n\n  if (target.length === 0) {\n    return undefined\n  }\n\n  return target\n}\n","export function resolveNodeTarget(versions: string[]): string[] | undefined {\n  const target: string[] = versions.filter((version) => version.startsWith('node'))\n\n  if (target.length === 0) {\n    return undefined\n  }\n\n  return target\n}\n","import {z} from 'zod'\nimport {errorMap} from 'zod-validation-error'\n\n/**\n * @public\n */\nexport const toggle = z.union([z.literal('error'), z.literal('warn'), z.literal('off')])\n\n/**\n * @public\n */\nexport type ToggleType = z.infer<typeof toggle>\n\n/**\n * @public\n */\nexport const strictOptions = z\n  .object({\n    noPackageJsonTypings: toggle.default('error'),\n    noImplicitSideEffects: toggle.default('warn'),\n    noImplicitBrowsersList: toggle.default('warn'),\n    alwaysPackageJsonTypes: toggle.default('error'),\n    alwaysPackageJsonMain: toggle.default('error'),\n    alwaysPackageJsonFiles: toggle.default('error'),\n  })\n  .strict()\n\n/**\n * To make error message paths line up with the paths in package.config.ts the schema is hoisted into a root schema\n * This way errors will say `Expected boolean, received string at \"strict.noPackageJsonTypings\"` instead of `Expected boolean, received string at \"noPackageJsonTypings\"`.\n */\nconst validationSchema = z.object({\n  strictOptions: strictOptions.default({}),\n})\n\n/**\n * @public\n */\nexport type InferredStrictOptions = z.infer<typeof strictOptions>\n\n/**\n * @public\n */\nexport interface StrictOptions {\n  /**\n   * Disallows a top level `typings` field in `package.json` if it is equal to `exports['.'].source`.\n   * @defaultValue 'error'\n   */\n  noPackageJsonTypings?: ToggleType\n  /**\n   * Requires specifying `sideEffects` in `package.json`.\n   * @defaultValue 'warn'\n   */\n  noImplicitSideEffects?: ToggleType\n  /**\n   * Requires specifying `browserslist` in `package.json`, instead of relying on it implicitly being:\n   * @example\n   * ```\n   * \"browserslist\": \"extends @sanity/browserslist-config\"\n   * ```\n   * @defaultValue 'warn'\n   */\n  noImplicitBrowsersList?: ToggleType\n  /**\n   * If typescript is used then `types` in `package.json` should be specified for npm listings to show the TS icon.\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonTypes?: ToggleType\n  /**\n   * A lot of analysis tooling requiers the `main` field to work (like bundlephobia) and so it's best practice to always include it\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonMain?: ToggleType\n  /**\n   * Using `.npmignore` is error prone, it's best practice to always declare `files` instead\n   * @defaultValue 'error'\n   */\n  alwaysPackageJsonFiles?: ToggleType\n}\n\n/** @internal */\nexport function parseStrictOptions(input: unknown): InferredStrictOptions {\n  return validationSchema.parse({strictOptions: input}, {errorMap}).strictOptions\n}\n","import path from 'node:path'\n\nimport browserslistToEsbuild from 'browserslist-to-esbuild'\n\nimport {\n  type BuildContext,\n  DEFAULT_BROWSERSLIST_QUERY,\n  loadTSConfig,\n  type PackageJSON,\n  parseExports,\n  type PkgConfigOptions,\n  type PkgExports,\n  type PkgRuntime,\n  resolveConfigProperty,\n} from './core'\nimport {findCommonDirPath, pathContains} from './core/findCommonPath'\nimport type {Logger} from './logger'\nimport {resolveBrowserTarget} from './resolveBrowserTarget'\nimport {resolveNodeTarget} from './resolveNodeTarget'\nimport {parseStrictOptions} from './strict'\n\nexport async function resolveBuildContext(options: {\n  config?: PkgConfigOptions\n  cwd: string\n  emitDeclarationOnly?: boolean\n  logger: Logger\n  pkg: PackageJSON\n  strict: boolean\n  tsconfig: string\n}): Promise<BuildContext> {\n  const {\n    config,\n    cwd,\n    emitDeclarationOnly = false,\n    logger,\n    pkg,\n    strict,\n    tsconfig: tsconfigPath,\n  } = options\n  const tsconfig = await loadTSConfig({cwd, tsconfigPath})\n  const strictOptions = parseStrictOptions(config?.strictOptions ?? {})\n\n  /* eslint-disable padding-line-between-statements */\n  let browserslist = pkg.browserslist\n  if (!browserslist) {\n    if (strict && strictOptions.noImplicitBrowsersList !== 'off') {\n      if (strictOptions.noImplicitBrowsersList === 'error') {\n        throw new Error(\n          '\\n- ' +\n            `package.json: \"browserslist\" is missing, set it to \\`\"browserslist\": \"extends @sanity/browserslist-config\"\\``,\n        )\n      } else {\n        logger.warn(\n          'Could not detect a `browserslist` property in `package.json`, using default configuration. Add `\"browserslist\": \"extends @sanity/browserslist-config\"` to silence this warning.',\n        )\n      }\n    }\n    browserslist = DEFAULT_BROWSERSLIST_QUERY\n  }\n  const targetVersions = browserslistToEsbuild(browserslist)\n  /* eslint-enable padding-line-between-statements */\n\n  if (\n    strict &&\n    strictOptions.noImplicitSideEffects !== 'off' &&\n    typeof pkg.sideEffects === 'undefined'\n  ) {\n    const msg =\n      'package.json: `sideEffects` is missing, see https://webpack.js.org/guides/tree-shaking/#clarifying-tree-shaking-and-sideeffects for how to define `sideEffects`'\n\n    if (strictOptions.noImplicitSideEffects === 'error') {\n      throw new Error(msg)\n    } else {\n      logger.warn(msg)\n    }\n  }\n\n  const nodeTarget = resolveNodeTarget(targetVersions)\n  const webTarget = resolveBrowserTarget(targetVersions)\n\n  if (!nodeTarget) {\n    throw new Error('no matching `node` target')\n  }\n\n  if (!webTarget) {\n    throw new Error('no matching `web` target')\n  }\n\n  const target: Record<PkgRuntime, string[]> = {\n    '*': webTarget.concat(nodeTarget),\n    'browser': webTarget,\n    'node': nodeTarget,\n  }\n\n  const parsedExports = parseExports({\n    cwd,\n    pkg,\n    strict,\n    legacyExports: config?.legacyExports ?? false,\n    strictOptions,\n    logger,\n  }).reduce<PkgExports>((acc, x) => {\n    const {_path: exportPath, ...exportEntry} = x\n\n    return {...acc, [exportPath]: exportEntry}\n  }, {})\n\n  const exports = resolveConfigProperty(config?.exports, parsedExports)\n\n  const parsedExternal = [\n    ...(pkg.dependencies ? Object.keys(pkg.dependencies) : []),\n    ...(pkg.peerDependencies ? Object.keys(pkg.peerDependencies) : []),\n  ]\n\n  // Merge externals if an array is provided, replace if it's a function\n  const external =\n    config && Array.isArray(config.external)\n      ? [...parsedExternal, ...config.external]\n      : resolveConfigProperty(config?.external, parsedExternal)\n  // Merge bundledPackages with dev deps, replace if it's a function\n  const externalWithTypes = new Set([pkg.name, ...external, ...external.map(transformPackageName)])\n  const bundledDependencies = [\n    ...(pkg.devDependencies ? Object.keys(pkg.devDependencies) : []),\n  ].filter(\n    // Do not bundle anything that is marked as external\n    (_) => !externalWithTypes.has(_),\n  )\n  const bundledPackages =\n    config && Array.isArray(config.extract?.bundledPackages)\n      ? [...bundledDependencies, ...config.extract.bundledPackages]\n      : resolveConfigProperty(config?.extract?.bundledPackages, bundledDependencies)\n\n  const outputPaths = Object.values(exports)\n    .flatMap((exportEntry) => {\n      return [\n        exportEntry.import,\n        exportEntry.require,\n        exportEntry.browser?.import,\n        exportEntry.browser?.require,\n        exportEntry.node?.source && exportEntry.node.import,\n        exportEntry.node?.source && exportEntry.node.require,\n        // @TODO implement this\n        // exportEntry['react-compiler']?.source && exportEntry['react-compiler']?.default,\n      ].filter(Boolean) as string[]\n    })\n    .map((p) => path.resolve(cwd, p))\n\n  const commonDistPath = findCommonDirPath(outputPaths)\n\n  if (commonDistPath === cwd) {\n    throw new Error(\n      'all output files must share a common parent directory which is not the root package directory',\n    )\n  }\n\n  if (commonDistPath && !pathContains(cwd, commonDistPath)) {\n    throw new Error('all output files must be located within the package')\n  }\n\n  const configDistPath = config?.dist ? path.resolve(cwd, config.dist) : undefined\n\n  if (\n    configDistPath &&\n    commonDistPath &&\n    configDistPath !== commonDistPath &&\n    !pathContains(configDistPath, commonDistPath)\n  ) {\n    logger.log(`did you mean to configure \\`dist: './${path.relative(cwd, commonDistPath)}'\\`?`)\n\n    throw new Error('all output files must be located with the configured `dist` path')\n  }\n\n  const distPath = configDistPath || commonDistPath\n\n  if (!distPath) {\n    throw new Error('could not detect `dist` path')\n  }\n\n  const ctx: BuildContext = {\n    config,\n    cwd,\n    distPath,\n    emitDeclarationOnly,\n    exports,\n    external,\n    bundledPackages,\n    files: [],\n    logger,\n    pkg,\n    runtime: config?.runtime ?? '*',\n    strict,\n    target,\n    ts: {\n      config: tsconfig,\n      configPath: tsconfigPath,\n    },\n  }\n\n  return ctx\n}\n\nfunction transformPackageName(packageName: string): string {\n  if (packageName.startsWith('@types/')) {\n    // If it already starts with @types, return it as is\n    return packageName\n  } else if (packageName.startsWith('@')) {\n    // Handle scoped packages\n    const [scope, name] = packageName.split('/')\n\n    return `@types/${scope.slice(1)}__${name}`\n  } else {\n    // Handle regular packages\n    return `@types/${packageName}`\n  }\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport type {BuildContext, PkgExport, PkgFormat, PkgRuntime} from './core'\nimport type {\n  BuildTask,\n  DtsTask,\n  RollupLegacyTask,\n  RollupReactCompilerTask,\n  RollupTask,\n  RollupTaskEntry,\n} from './tasks'\nimport {fileEnding, getTargetPaths, legacyEnding} from './tasks/dts/getTargetPaths'\n\n/** @internal */\nexport function resolveBuildTasks(ctx: BuildContext): BuildTask[] {\n  const {config, cwd, pkg, target} = ctx\n\n  const bundles = config?.bundles || []\n\n  const tasks: BuildTask[] = []\n\n  const exports = Object.entries(ctx.exports || {}).map(\n    ([_path, exp]) => ({_path, ...exp}) as PkgExport & {_path: string},\n  )\n\n  const dtsTask: DtsTask = {\n    type: 'build:dts',\n    entries: [],\n  }\n\n  const rollupTasks: Record<string, RollupTask> = {}\n  const rollupLegacyTasks: Record<string, RollupLegacyTask> = {}\n  const rollupReactCompilerTask: RollupReactCompilerTask = {\n    type: 'build:react-compiler',\n    runtime: 'browser',\n    format: 'esm',\n    entries: [],\n    target: target.browser,\n  }\n\n  function addRollupTaskEntry(format: PkgFormat, runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `${format}:${runtime}`\n\n    if (rollupTasks[buildId]) {\n      rollupTasks[buildId].entries.push(entry)\n    } else {\n      rollupTasks[buildId] = {\n        type: 'build:js',\n        buildId,\n        entries: [entry],\n        runtime,\n        format,\n        target: target[runtime],\n      }\n    }\n  }\n\n  function addRollupLegacyTaskEntry(runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `esm:${runtime}`\n\n    if (rollupLegacyTasks[buildId]) {\n      rollupLegacyTasks[buildId].entries.push(entry)\n    } else {\n      rollupLegacyTasks[buildId] = {\n        type: 'build:legacy',\n        buildId,\n        entries: [entry],\n        runtime,\n        format: 'esm',\n        // @TODO set a different target here that is compatible with legacy bundlers and testing tools like brownfield jest\n        target: target[runtime],\n      }\n    }\n  }\n\n  function addRollupReactCompilerTaskEntry(entry: RollupTaskEntry) {\n    rollupReactCompilerTask.entries.push(entry)\n  }\n\n  // Parse `dts` tasks\n  for (const exp of exports) {\n    const importId = path.join(pkg.name, exp._path)\n\n    if (exp.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.source,\n        targetPaths: getTargetPaths(pkg.type, exp),\n      })\n    }\n\n    if (exp.browser?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.browser.source,\n        targetPaths: getTargetPaths(pkg.type, exp.browser),\n      })\n    }\n\n    if (exp.node?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.node.source,\n        targetPaths: getTargetPaths(pkg.type, exp.node),\n      })\n    }\n\n    // @TODO implement this\n    // if (exp['react-compiler']?.source?.endsWith('.ts')) {\n    //   dtsTask.entries.push({\n    //     importId,\n    //     exportPath: exp._path,\n    //     sourcePath: exp['react-compiler'].source,\n    //     targetPaths: getTargetPaths(pkg.type, exp['react-compiler']),\n    //   })\n    // }\n  }\n\n  // Handle dts tasks for bundles\n  for (const bundle of bundles) {\n    if (bundle.source?.endsWith('.ts')) {\n      // importId needs to be how the bundle is used, like `@sanity/pkg-utils/dist/cli`\n      // exportPath needs to be the path to the bundle, like `./dist/cli`\n      // targetPaths is then: [./dist/cli.d.ts, ./dist/cli.d.cts]\n      const exportPath = (bundle.import || bundle.require)!.replace(/\\.[mc]?js$/, '')\n      const importId = path.join(pkg.name, exportPath)\n\n      dtsTask.entries.push({\n        importId,\n        exportPath,\n        sourcePath: bundle.source,\n        targetPaths: getTargetPaths(pkg.type, bundle),\n      })\n    }\n  }\n\n  // Add dts task\n  if (dtsTask.entries.length) {\n    tasks.push(dtsTask)\n  }\n\n  if (!ctx.emitDeclarationOnly) {\n    // Parse rollup:commonjs:* tasks\n    for (const exp of exports) {\n      const output = exp.require\n\n      if (!output) continue\n\n      addRollupTaskEntry('commonjs', ctx.runtime, {\n        path: exp._path,\n        source: exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:esm:* tasks\n    for (const exp of exports) {\n      const output = exp.import\n\n      if (!output) continue\n\n      addRollupTaskEntry('esm', ctx.runtime, {\n        path: exp._path,\n        source: exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:commonjs:browser tasks\n    for (const exp of exports) {\n      const output = exp.browser?.require\n\n      if (!output) continue\n\n      addRollupTaskEntry('commonjs', 'browser', {\n        path: exp._path,\n        source: exp.browser?.source || exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:esm:browser tasks\n    for (const exp of exports) {\n      const output = exp.browser?.import\n\n      if (!output) continue\n\n      addRollupTaskEntry('esm', 'browser', {\n        path: exp._path,\n        source: exp.browser?.source || exp.source,\n        output,\n      })\n    }\n\n    // Parse rollup:react-compiler tasks\n    for (const exp of exports) {\n      const output = exp['react-compiler']?.default\n\n      if (!output) continue\n\n      addRollupReactCompilerTaskEntry({\n        path: exp._path,\n        source: exp['react-compiler']?.source || exp.source,\n        output,\n      })\n    }\n\n    // Add react-compiler task\n    if (rollupReactCompilerTask.entries.length) {\n      tasks.push(rollupReactCompilerTask)\n    }\n\n    // Create rollup bundles that legacy export files will re-export\n    if (config?.legacyExports) {\n      for (const exp of exports) {\n        const runtime = exp.browser?.import ? 'browser' : ctx.runtime\n        const output = exp.browser?.import || exp.import\n\n        if (!output) continue\n\n        // Change the suffix to what the legacy exports will use\n        const legacyOutput = output.replace(fileEnding, legacyEnding)\n\n        addRollupLegacyTaskEntry(runtime, {\n          path: exp._path,\n          source: exp.browser?.source || exp.source,\n          output: legacyOutput,\n        })\n      }\n    }\n\n    for (const bundle of bundles) {\n      const idx = bundles.indexOf(bundle)\n\n      if (bundle.require) {\n        addRollupTaskEntry('commonjs', bundle.runtime || ctx.runtime, {\n          path: `__$$bundle_cjs_${idx}$$__`,\n          source: bundle.source,\n          output: bundle.require,\n        })\n      }\n\n      if (bundle.import) {\n        addRollupTaskEntry('esm', bundle.runtime || ctx.runtime, {\n          path: `__$$bundle_esm_${idx}$$__`,\n          source: bundle.source,\n          output: bundle.import,\n        })\n      }\n    }\n\n    tasks.push(...Object.values(rollupTasks), ...Object.values(rollupLegacyTasks))\n\n    // Write legacy exports files\n    if (config?.legacyExports) {\n      for (const exp of exports) {\n        if (exp._exported && exp._path !== '.') {\n          const output = (exp.browser?.import || exp.import || '').replace(fileEnding, legacyEnding)\n          const relativeTargetPath = output.replace(/\\.[^/.]+$/, '')\n\n          if (relativeTargetPath) {\n            fs.writeFileSync(\n              path.resolve(cwd, `${exp._path}.js`),\n              ['// AUTO-GENERATED – DO NOT EDIT', `export * from '${relativeTargetPath}'`, ''].join(\n                '\\n',\n              ),\n            )\n          }\n        }\n      }\n    }\n  }\n\n  return tasks\n}\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk'\n\nexport function createSpinner(msg: string): {complete: () => void; error: () => void} {\n  const startTime = Date.now()\n\n  console.log(msg)\n\n  return {\n    complete: () => {\n      console.log(`${chalk.green('[success]')} ${chalk.gray(`${Date.now() - startTime}ms`)}`)\n    },\n    error: () => {\n      console.log(`${chalk.red('[error]')} ${chalk.gray(`${Date.now() - startTime}ms`)}`)\n    },\n  }\n}\n","import path from 'node:path'\n\nimport type {ExtractorMessage} from '@microsoft/api-extractor'\nimport chalk from 'chalk'\n\nimport type {BuildContext} from './core'\n\nexport function printExtractMessages(ctx: BuildContext, messages: ExtractorMessage[]): void {\n  const {cwd, logger} = ctx\n\n  const warnings = messages.filter((msg) => msg.logLevel === 'warning')\n\n  if (warnings.length) {\n    logger.log()\n  }\n\n  for (const msg of warnings) {\n    const sourceFilePath = msg.sourceFilePath && path.relative(cwd, msg.sourceFilePath)\n\n    if (msg.messageId === 'TS6307') {\n      // Ignore this warning:\n      // > TS6307: <filename> is not in project file list.\n      // > Projects must list all files or use an 'include' pattern.\n      continue\n    }\n\n    logger.log(\n      [\n        `${chalk.cyan(sourceFilePath || '?')}`,\n        `:${chalk.yellow(msg.sourceFileLine)}:${chalk.yellow(msg.sourceFileColumn)}`,\n        ` - ${chalk.yellow('warning')} ${chalk.gray(msg.messageId)}\\n`,\n        msg.text,\n        '\\n',\n      ].join(''),\n    )\n  }\n\n  const errors: ExtractorMessage[] = messages.filter((msg) => msg.logLevel === 'error')\n\n  if (!warnings.length && errors.length) {\n    logger.log('')\n  }\n\n  for (const msg of errors) {\n    const sourceFilePath = msg.sourceFilePath && path.relative(cwd, msg.sourceFilePath)\n\n    logger.log(\n      [\n        `${chalk.cyan(sourceFilePath || '?')}`,\n        `:${chalk.yellow(msg.sourceFileLine)}:${chalk.yellow(msg.sourceFileColumn)}`,\n        ` - ${chalk.red('error')} ${chalk.gray(msg.messageId)}\\n`,\n        msg.text,\n        '\\n',\n      ].join(''),\n    )\n  }\n\n  if (errors.length) {\n    process.exit(1)\n  }\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport ts from 'typescript'\n\nimport type {Logger} from '../../logger'\n\nexport function printDiagnostic(options: {\n  cwd: string\n  logger: Logger\n  diagnostic: ts.Diagnostic\n}): void {\n  const {cwd, logger, diagnostic} = options\n\n  if (diagnostic.file && diagnostic.start) {\n    const {line, character} = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start)\n    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n\n    const file = path.relative(cwd, diagnostic.file.fileName)\n\n    const output = [\n      `${chalk.yellow(file)}:${chalk.blue(line + 1)}:${chalk.blue(character + 1)} - `,\n      `${chalk.gray(`TS${diagnostic.code}:`)} ${message}`,\n    ].join('')\n\n    if (diagnostic.category === ts.DiagnosticCategory.Error) {\n      logger.error(output)\n    }\n\n    if (diagnostic.category === ts.DiagnosticCategory.Warning) {\n      logger.warn(output)\n    }\n\n    if (diagnostic.category === ts.DiagnosticCategory.Message) {\n      logger.log(output)\n    }\n\n    if (diagnostic.category === ts.DiagnosticCategory.Suggestion) {\n      logger.log(output)\n    }\n  } else {\n    logger.log(ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n'))\n  }\n}\n","import ts from 'typescript'\n\nimport type {Logger} from '../../logger'\nimport {printDiagnostic} from './printDiagnostic'\n\n/** @internal */\nexport async function buildTypes(options: {\n  cwd: string\n  logger: Logger\n  outDir: string\n  tsconfig: ts.ParsedCommandLine\n  strict: boolean\n}): Promise<void> {\n  const {cwd, logger, outDir, tsconfig, strict = false} = options\n\n  const compilerOptions: ts.CompilerOptions = {\n    ...tsconfig.options,\n    declaration: true,\n    declarationDir: outDir,\n    emitDeclarationOnly: true,\n    noEmit: false,\n    noEmitOnError: strict ? true : (tsconfig.options.noEmitOnError ?? true),\n    outDir,\n  }\n\n  const program = ts.createProgram(tsconfig.fileNames, compilerOptions)\n\n  const emitResult = program.emit()\n\n  const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics)\n\n  for (const diagnostic of allDiagnostics) {\n    printDiagnostic({cwd, logger, diagnostic})\n  }\n\n  if (emitResult.emitSkipped) {\n    const errors = allDiagnostics.filter((diag) => diag.category === ts.DiagnosticCategory.Error)\n\n    if (errors.length) {\n      throw new Error('failed to compile TypeScript definitions')\n    }\n  }\n}\n","import type {ExtractorMessage} from '@microsoft/api-extractor'\n\n/** @internal */\nexport class DtsError extends Error {\n  messages: ExtractorMessage[]\n\n  constructor(message: string, messages: ExtractorMessage[]) {\n    super(message)\n    this.messages = messages\n  }\n}\n","import path from 'node:path'\n\nimport type {IConfigFile, IExtractorMessagesConfig} from '@microsoft/api-extractor'\nimport ts from 'typescript'\n\nexport function createApiExtractorConfig(options: {\n  bundledPackages?: string[]\n  distPath: string\n  exportPath: string\n  filePath: string\n  messages: IExtractorMessagesConfig\n  projectFolder: string\n  mainEntryPointFilePath: string\n  tsconfig: ts.ParsedCommandLine\n  tsconfigPath: string\n}): IConfigFile {\n  const {\n    bundledPackages,\n    distPath,\n    exportPath,\n    filePath,\n    messages,\n    projectFolder,\n    mainEntryPointFilePath,\n    tsconfig,\n    tsconfigPath,\n  } = options\n\n  // When the module is 'preserve' it's necessary to override the tsconfig file as api-extractor doesn't handle it out of the box\n  const workaroundModulePreserve = tsconfig.options.module === ts.ModuleKind.Preserve\n  // If `paths` are used for self-referencing imports (e.g. the module is named `sanity`, and the `sanity/structure` export is also importing from `sanity/router`),\n  const workaroundPaths = !!tsconfig.options.paths\n\n  const overrideTsconfig = {\n    extends: tsconfigPath,\n    compilerOptions: {},\n  }\n\n  if (workaroundModulePreserve) {\n    Object.assign(overrideTsconfig.compilerOptions, {\n      // Set the equivalent options to `module: 'Preserve'`\n      // https://github.com/microsoft/TypeScript/pull/56785/files?file-filters%5B%5D=.js&file-filters%5B%5D=.json&file-filters%5B%5D=.symbols&file-filters%5B%5D=.ts&file-filters%5B%5D=.types&show-viewed-files=true#diff-31d3c12bafea26bc9e8c8a77920c41af0c593206442add70c45a06c063767445\n      module: 'ESNext',\n      moduleResolution: 'Bundler',\n      esModuleInterop: true,\n      resolveJsonModule: true,\n    })\n  }\n\n  if (workaroundPaths) {\n    Object.assign(overrideTsconfig.compilerOptions, {\n      // An empty object replaces whatever is in the original tsconfig file\n      paths: {},\n    })\n  }\n\n  return {\n    apiReport: {\n      enabled: false,\n      reportFileName: '<unscopedPackageName>.api.md',\n    },\n    bundledPackages,\n    compiler:\n      workaroundModulePreserve || workaroundPaths\n        ? {overrideTsconfig}\n        : {tsconfigFilePath: tsconfigPath},\n\n    docModel: {\n      enabled: false,\n      apiJsonFilePath: path.resolve(distPath, `${exportPath}.api.json`),\n    },\n    dtsRollup: {\n      enabled: true,\n      untrimmedFilePath: path.resolve(distPath, filePath),\n      // betaTrimmedFilePath: path.resolve(distPath, filePath.replace('.d.ts', '-beta.d.ts')),\n      // publicTrimmedFilePath: path.resolve(distPath, filePath.replace('.d.ts', '-public.d.ts')),\n    },\n    tsdocMetadata: {\n      enabled: false,\n    },\n    messages,\n    mainEntryPointFilePath,\n    projectFolder,\n  }\n}\n","import {readFile} from 'node:fs/promises'\n\nimport {TSDocConfigFile} from '@microsoft/tsdoc-config'\nimport {parse} from 'jsonc-parser'\n\n/** @public */\nexport interface TSDocCustomTag {\n  name: string\n  syntaxKind: 'block' | 'modifier'\n  allowMultiple?: boolean\n}\n\n/** @internal */\nexport async function createTSDocConfig(opts: {\n  customTags: TSDocCustomTag[]\n}): Promise<TSDocConfigFile | undefined> {\n  const {customTags} = opts\n\n  if (customTags.length === 0) {\n    return undefined\n  }\n\n  const tsDocBaseBuf = await readFile(\n    require.resolve('@microsoft/api-extractor/extends/tsdoc-base.json'),\n  )\n\n  // Include the definitions that are required for API Extractor\n  // extends: ['@microsoft/api-extractor/extends/tsdoc-base.json'],\n  const tsDocBaseConfig = parse(tsDocBaseBuf.toString())\n\n  // Define custom tags and specify how they should be parsed\n  const tagDefinitions = (tsDocBaseConfig.tagDefinitions || []).concat(\n    customTags.map((t) => ({\n      tagName: `@${t.name}`,\n      syntaxKind: t.syntaxKind,\n      allowMultiple: t.allowMultiple,\n    })),\n  )\n\n  // Indicate that custom tags are supported by your tooling.\n  // (Without this, warnings may be reported saying that a tag is unsupported.)\n  const supportForTags = {...tsDocBaseConfig.supportForTags}\n\n  for (const customTag of customTags) {\n    supportForTags[`@${customTag.name}`] = true\n  }\n\n  return TSDocConfigFile.loadFromObject({\n    ...tsDocBaseConfig,\n    noStandardTags: false,\n    tagDefinitions,\n    supportForTags,\n  })\n}\n","import type {File} from '@babel/types'\nimport type {ExtractorResult} from '@microsoft/api-extractor'\nimport {parse, print} from 'recast'\nimport typeScriptParser from 'recast/parsers/typescript.js'\nimport type {Program} from 'typescript'\n\n/**\n * A workaround to find all module blocks in extract TS files.\n * @internal\n * */\nexport async function extractModuleBlocksFromTypes({\n  tsOutDir,\n  extractResult,\n}: {\n  tsOutDir: string\n  extractResult: ExtractorResult\n}): Promise<string[]> {\n  const program = extractResult.compilerState.program as Program\n  const moduleBlocks: string[] = []\n\n  // all program files, including node_modules\n  const allProgramFiles = [...program.getSourceFiles()]\n\n  // just our compiled files used in the program\n  const sourceFiles = allProgramFiles.filter((sourceFile) => sourceFile.fileName.includes(tsOutDir))\n\n  for (const sourceFile of sourceFiles) {\n    if (sourceFile.text.includes('declare module')) {\n      moduleBlocks.push(...extractModuleBlocks(sourceFile.text))\n    }\n  }\n\n  return moduleBlocks\n}\n\n/** @internal */\nexport function extractModuleBlocks(fileContent: string): string[] {\n  const ast = parse(fileContent, {\n    parser: typeScriptParser,\n  }) as File\n\n  return ast.program.body\n    .filter((node) => node.type === 'TSModuleDeclaration')\n    .map((node) => print(node).code)\n}\n","import type {ExtractorLogLevel, IExtractorMessagesConfig} from '@microsoft/api-extractor'\n\nimport type {PkgConfigOptions, PkgRuleLevel} from '../../core'\n\nconst LOG_LEVELS: Record<PkgRuleLevel, ExtractorLogLevel> = {\n  error: 'error' as ExtractorLogLevel.Error,\n  info: 'info' as ExtractorLogLevel.Info,\n  off: 'none' as ExtractorLogLevel.None,\n  warn: 'warning' as ExtractorLogLevel.Warning,\n}\n\n/** @internal */\nexport function getExtractMessagesConfig(options: {\n  rules: NonNullable<PkgConfigOptions['extract']>['rules']\n}): IExtractorMessagesConfig {\n  const {rules} = options\n\n  function ruleToLogLevel(\n    key: keyof NonNullable<NonNullable<PkgConfigOptions['extract']>['rules']>,\n    defaultLevel?: ExtractorLogLevel,\n  ) {\n    const r = rules?.[key]\n\n    return (r ? LOG_LEVELS[r] : defaultLevel || 'warning') as ExtractorLogLevel\n  }\n\n  return {\n    compilerMessageReporting: {\n      default: {\n        logLevel: 'warning' as ExtractorLogLevel,\n      },\n    },\n\n    extractorMessageReporting: {\n      'default': {\n        logLevel: 'warning' as ExtractorLogLevel,\n        addToApiReportFile: false,\n      },\n\n      'ae-forgotten-export': {\n        logLevel: ruleToLogLevel('ae-forgotten-export', 'error' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n\n      'ae-incompatible-release-tags': {\n        logLevel: ruleToLogLevel('ae-incompatible-release-tags', 'error' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n\n      'ae-internal-missing-underscore': {\n        logLevel: ruleToLogLevel('ae-internal-missing-underscore'),\n        addToApiReportFile: false,\n      },\n\n      'ae-missing-release-tag': {\n        logLevel: ruleToLogLevel('ae-missing-release-tag', 'error' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n\n      'ae-wrong-input-file-type': {\n        logLevel: 'none' as ExtractorLogLevel,\n        addToApiReportFile: false,\n      },\n    },\n\n    tsdocMessageReporting: {\n      'default': {\n        logLevel: 'warning' as ExtractorLogLevel,\n        addToApiReportFile: false,\n      },\n\n      'tsdoc-link-tag-unescaped-text': {\n        logLevel: ruleToLogLevel('tsdoc-link-tag-unescaped-text', 'warning' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n\n      'tsdoc-undefined-tag': {\n        logLevel: ruleToLogLevel('tsdoc-undefined-tag', 'error' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n\n      'tsdoc-unsupported-tag': {\n        logLevel: ruleToLogLevel('tsdoc-unsupported-tag', 'none' as ExtractorLogLevel),\n        addToApiReportFile: false,\n      },\n    },\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {\n  Extractor,\n  ExtractorConfig,\n  type ExtractorMessage,\n  type ExtractorResult,\n} from '@microsoft/api-extractor'\nimport {mkdirp} from 'mkdirp'\nimport prettier from 'prettier'\nimport type ts from 'typescript'\n\nimport type {BuildFile, PkgConfigOptions} from '../../core'\nimport {createApiExtractorConfig} from './createApiExtractorConfig'\nimport {createTSDocConfig} from './createTSDocConfig'\nimport {extractModuleBlocksFromTypes} from './extractModuleBlocks'\nimport {getExtractMessagesConfig} from './getExtractMessagesConfig'\n\nexport async function extractTypes(options: {\n  bundledPackages?: string[]\n  customTags: NonNullable<PkgConfigOptions['extract']>['customTags']\n  cwd: string\n  distPath: string\n  exportPath: string\n  filePaths: string[]\n  files: BuildFile[]\n  projectPath: string\n  rules?: NonNullable<PkgConfigOptions['extract']>['rules']\n  sourceTypesPath: string\n  tmpPath: string\n  tsconfig: ts.ParsedCommandLine\n  tsconfigPath: string\n}): Promise<{extractorResult: ExtractorResult; messages: ExtractorMessage[]}> {\n  const {\n    bundledPackages,\n    customTags,\n    distPath,\n    exportPath,\n    files,\n    filePaths,\n    projectPath,\n    rules,\n    sourceTypesPath,\n    tmpPath,\n    tsconfig,\n    tsconfigPath,\n  } = options\n\n  const tsdocConfigFile = await createTSDocConfig({\n    customTags: customTags || [],\n  })\n\n  const filePath = filePaths[0].replace(/\\.d\\.[mc]ts$/, '.d.ts')\n  // If there are package.config.ts `bundles` we might not have something that should leave behind a `.d.ts` file and need to handle that\n  const shouldCleanUpDts = !filePaths.includes(filePath)\n  const extractorConfig: ExtractorConfig = ExtractorConfig.prepare({\n    configObject: createApiExtractorConfig({\n      bundledPackages,\n      distPath,\n      exportPath,\n      filePath,\n      messages: getExtractMessagesConfig({rules}),\n      projectFolder: projectPath,\n      mainEntryPointFilePath: sourceTypesPath,\n      tsconfig,\n      tsconfigPath,\n    }),\n    configObjectFullPath: undefined,\n    tsdocConfigFile,\n    packageJsonFullPath: path.resolve(projectPath, 'package.json'),\n  })\n\n  const messages: ExtractorMessage[] = []\n\n  // Invoke API Extractor\n  const extractorResult = Extractor.invoke(extractorConfig, {\n    // Equivalent to the \"--local\" command-line parameter\n    localBuild: true,\n    // Equivalent to the \"--verbose\" command-line parameter\n    showVerboseMessages: true,\n    // handle messages\n    messageCallback(message: ExtractorMessage) {\n      messages.push(message)\n      message.handled = true\n    },\n  })\n\n  const typesPath = path.resolve(distPath, filePath)\n  const typesBuf = await fs.readFile(typesPath)\n  const prettierConfig = await prettier.resolveConfig(typesPath)\n\n  await mkdirp(path.dirname(typesPath))\n\n  const moduleBlocks = await extractModuleBlocksFromTypes({\n    extractResult: extractorResult,\n    tsOutDir: tmpPath,\n  })\n\n  const code = [typesBuf.toString(), ...moduleBlocks].join('\\n\\n')\n  const prettyCode = await prettier.format(code, {\n    ...prettierConfig,\n    filepath: typesPath,\n  })\n\n  for (const expFilePath of filePaths) {\n    const expTypesPath = path.resolve(distPath, expFilePath)\n\n    await fs.writeFile(expTypesPath, prettyCode)\n\n    // Add to `files` in context\n    files.push({\n      type: 'types',\n      path: expTypesPath,\n    })\n  }\n\n  if (shouldCleanUpDts) {\n    await fs.unlink(typesPath)\n  }\n\n  return {extractorResult, messages}\n}\n","import path from 'node:path'\n\nimport type {ExtractorMessage} from '@microsoft/api-extractor'\nimport rimraf from 'rimraf'\n\nimport type {BuildContext} from '../../core'\nimport {buildTypes} from './buildTypes'\nimport {DtsError} from './DtsError'\nimport {extractTypes} from './extractTypes'\nimport type {DtsResult, DtsTask, DtsWatchTask} from './types'\n\n/**\n * - Build type definitions to a temporary directory using TypeScript compiler.\n * - Create a type definition bundle for each export entry.\n * - When done, remove the temporary directory.\n */\nexport async function doExtract(\n  ctx: BuildContext,\n  task: DtsTask | DtsWatchTask,\n): Promise<DtsResult> {\n  const {config, cwd, files, logger, strict, ts, bundledPackages} = ctx\n\n  if (!ts.config || !ts.configPath) {\n    return {type: 'dts', messages: [], results: []}\n  }\n\n  const {outDir, rootDir = cwd} = ts.config.options\n\n  if (!outDir) {\n    throw new Error('tsconfig.json is missing `compilerOptions.outDir`')\n  }\n\n  const tmpPath = path.resolve(outDir, '__tmp__')\n\n  await buildTypes({cwd, logger, outDir: tmpPath, strict, tsconfig: ts.config})\n  const messages: ExtractorMessage[] = []\n\n  const results: {sourcePath: string; filePaths: string[]}[] = []\n\n  for (const entry of task.entries) {\n    const exportPath = entry.exportPath === '.' ? './index' : entry.exportPath\n\n    const sourceTypesPath = path.resolve(\n      tmpPath,\n      path.relative(rootDir, path.resolve(cwd, entry.sourcePath)).replace(/\\.ts$/, '.d.ts'),\n    )\n\n    const targetPaths = entry.targetPaths.map((targetPath) => path.resolve(cwd, targetPath))\n    const filePaths = targetPaths.map((targetPath) => path.relative(outDir, targetPath))\n    const result = await extractTypes({\n      bundledPackages: bundledPackages || [],\n      customTags: config?.extract?.customTags,\n      cwd,\n      distPath: outDir,\n      exportPath,\n      files,\n      filePaths,\n      projectPath: cwd,\n      rules: config?.extract?.rules,\n      sourceTypesPath: sourceTypesPath,\n      tsconfig: ts.config,\n      tmpPath,\n      tsconfigPath: path.resolve(cwd, ts.configPath || 'tsconfig.json'),\n    })\n\n    messages.push(...result.messages)\n\n    const errors = result.messages.filter((msg) => msg.logLevel === 'error')\n\n    if (errors.length > 0) {\n      await rimraf(tmpPath)\n      throw new DtsError(`encountered ${errors.length} errors when extracting types`, errors)\n    }\n\n    results.push({sourcePath: path.resolve(cwd, entry.sourcePath), filePaths: targetPaths})\n  }\n\n  await rimraf(tmpPath)\n\n  return {type: 'dts', messages, results}\n}\n","import chalk from 'chalk'\nimport {Observable} from 'rxjs'\n\nimport {printExtractMessages} from '../../printExtractMessages'\nimport type {TaskHandler} from '../types'\nimport {doExtract} from './doExtract'\nimport {DtsError} from './DtsError'\nimport type {DtsResult, DtsTask} from './types'\n\n/** @internal */\nexport const dtsTask: TaskHandler<DtsTask, DtsResult> = {\n  name: (_ctx, task) =>\n    [\n      'Build type definitions...',\n      '  entries:',\n      ...task.entries.map((entry) => {\n        return entry.targetPaths\n          .map((targetPath) => {\n            return [\n              `    - ${chalk.cyan(entry.importId)}: `,\n              `${chalk.yellow(entry.sourcePath)} ${chalk.gray('→')} ${chalk.yellow(targetPath)}`,\n            ].join('')\n          })\n          .join('\\n')\n      }),\n    ].join('\\n'),\n  exec: (ctx, task) => {\n    return new Observable((observer) => {\n      doExtract(ctx, task)\n        .then((result) => {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch((err) => {\n          observer.error(err)\n        })\n    })\n  },\n  complete: (ctx, _task, result) => {\n    printExtractMessages(ctx, result.messages)\n  },\n  error: (ctx, _task, err) => {\n    const {logger} = ctx\n\n    if (err instanceof DtsError) {\n      printExtractMessages(ctx, err.messages)\n    } else if (err instanceof Error) {\n      logger.error(err)\n    }\n  },\n}\n","import path from 'node:path'\n\nimport type {ExtractorMessage} from '@microsoft/api-extractor'\nimport chalk from 'chalk'\nimport rimraf from 'rimraf'\nimport {Observable} from 'rxjs'\nimport ts from 'typescript'\n\nimport {printExtractMessages} from '../../printExtractMessages'\nimport type {TaskHandler} from '../types'\nimport {buildTypes} from './buildTypes'\nimport {DtsError} from './DtsError'\nimport {extractTypes} from './extractTypes'\nimport type {DtsResult, DtsWatchTask} from './types'\n\n/** @internal */\nexport const dtsWatchTask: TaskHandler<DtsWatchTask, DtsResult> = {\n  name: (_ctx, task) =>\n    [\n      'build type definitions',\n      ...task.entries.map((entry) => {\n        return entry.targetPaths.map((targetPath) => {\n          return [\n            `    - ${chalk.cyan(entry.importId)}: `,\n            `${chalk.yellow(entry.sourcePath)} ${chalk.gray('→')} ${chalk.yellow(targetPath)}`,\n          ].join('')\n        })\n      }),\n    ].join('\\n'),\n  exec: (ctx, task) => {\n    const {config, cwd, files, logger, strict, ts: tsContext, bundledPackages} = ctx\n\n    return new Observable((observer) => {\n      if (!tsContext.config || !tsContext.configPath) {\n        observer.next({type: 'dts', messages: [], results: []})\n        observer.complete()\n\n        return\n      }\n\n      const {outDir, rootDir = cwd} = tsContext.config.options\n\n      if (!outDir) {\n        observer.error(new Error('tsconfig.json is missing `compilerOptions.outDir`'))\n\n        return\n      }\n\n      const tmpPath = path.resolve(outDir, '__tmp__')\n\n      buildTypes({\n        cwd,\n        logger,\n        outDir: tmpPath,\n        tsconfig: tsContext.config,\n        strict,\n      }).catch((err) => {\n        observer.error(err)\n      })\n\n      const host = ts.createWatchCompilerHost(\n        tsContext.configPath,\n        {\n          ...tsContext.config.options,\n          declaration: true,\n          declarationDir: tmpPath,\n          emitDeclarationOnly: true,\n          noEmit: false,\n          noEmitOnError: strict ? true : (tsContext.config.options.noEmitOnError ?? true),\n          outDir: tmpPath,\n        },\n        ts.sys,\n        ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n        (diagnostic) => {\n          logger.error(ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n'))\n        },\n        (diagnostic) => {\n          logger.info(ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n'))\n        },\n      )\n\n      const origPostProgramCreate = host.afterProgramCreate\n\n      host.afterProgramCreate = async (program) => {\n        origPostProgramCreate?.(program)\n\n        const messages: ExtractorMessage[] = []\n        const results: {sourcePath: string; filePaths: string[]}[] = []\n\n        for (const entry of task.entries) {\n          const exportPath = entry.exportPath === '.' ? './index' : entry.exportPath\n\n          const sourceTypesPath = path.resolve(\n            tmpPath,\n            path.relative(rootDir, path.resolve(cwd, entry.sourcePath)).replace(/\\.ts$/, '.d.ts'),\n          )\n\n          const targetPaths = entry.targetPaths.map((targetPath) => path.resolve(cwd, targetPath))\n          const filePaths = targetPaths.map((targetPath) => path.relative(outDir, targetPath))\n\n          try {\n            const result = await extractTypes({\n              bundledPackages: bundledPackages || [],\n              customTags: config?.extract?.customTags,\n              cwd,\n              distPath: outDir,\n              exportPath,\n              files,\n              filePaths,\n              projectPath: cwd,\n              rules: config?.extract?.rules,\n              sourceTypesPath: sourceTypesPath,\n              tsconfig: tsContext.config!,\n              tmpPath,\n              tsconfigPath: path.resolve(cwd, tsContext.configPath || 'tsconfig.json'),\n            })\n\n            messages.push(...result.messages)\n            results.push({sourcePath: path.resolve(cwd, entry.sourcePath), filePaths: targetPaths})\n          } catch (err) {\n            if (err instanceof DtsError) {\n              messages.push(...err.messages)\n            } else {\n              observer.error(err)\n\n              return\n            }\n          }\n        }\n\n        observer.next({type: 'dts', messages, results})\n      }\n\n      const watchProgram = ts.createWatchProgram(host)\n\n      return () => {\n        watchProgram.close()\n        rimraf.sync(tmpPath)\n      }\n    })\n  },\n  complete: (ctx, task, result) => {\n    const {logger} = ctx\n\n    printExtractMessages(ctx, result.messages)\n\n    logger.success(\n      `build type definitions\\n       ${task.entries\n        .map(\n          (entry) =>\n            `    - ${chalk.cyan(entry.importId)}: ${chalk.yellow(entry.sourcePath)} ${chalk.gray('→')} ${chalk.yellow(entry.targetPaths.join(', '))}`,\n        )\n        .join('\\n       ')}`,\n    )\n    logger.log('')\n  },\n  error: (ctx, _task, err) => {\n    const {logger} = ctx\n\n    if (err instanceof DtsError) {\n      printExtractMessages(ctx, err.messages)\n    } else if (err instanceof Error) {\n      logger.error(err)\n    }\n  },\n}\n","/* eslint-disable no-console */\n\nexport interface ConsoleSpyMsg {\n  type: 'log' | 'warn' | 'error'\n  code?: string\n  args: unknown[]\n}\n\nexport interface ConsoleSpy {\n  messages: ConsoleSpyMsg[]\n  restore: () => void\n}\n\nexport function createConsoleSpy(options?: {\n  onRestored?: (messages: ConsoleSpyMsg[]) => void\n}): ConsoleSpy {\n  const {onRestored} = options || {}\n\n  const original = {\n    log: console.log,\n    warn: console.warn,\n    error: console.error,\n  }\n\n  const messages: ConsoleSpyMsg[] = []\n\n  console.log = (...args: unknown[]) => messages.push({type: 'log', args})\n  console.warn = (...args: unknown[]) => messages.push({type: 'warn', args})\n  console.error = (...args: unknown[]) => messages.push({type: 'error', args})\n\n  return {\n    messages,\n    restore: () => {\n      console.log = original.log\n      console.warn = original.warn\n      console.error = original.error\n\n      onRestored?.(messages)\n    },\n  }\n}\n","import path from 'node:path'\n\nimport {optimizeLodashImports} from '@optimize-lodash/rollup-plugin'\nimport alias from '@rollup/plugin-alias'\nimport {babel, getBabelOutputPlugin} from '@rollup/plugin-babel'\nimport commonjs from '@rollup/plugin-commonjs'\nimport json from '@rollup/plugin-json'\nimport {nodeResolve} from '@rollup/plugin-node-resolve'\nimport replace from '@rollup/plugin-replace'\nimport terser from '@rollup/plugin-terser'\nimport type {InputOptions, OutputOptions, Plugin} from 'rollup'\nimport esbuild from 'rollup-plugin-esbuild'\n\nimport {pkgExtMap as extMap} from '../../../node/core/pkg/pkgExt'\nimport {type BuildContext, type PackageJSON, resolveConfigProperty} from '../../core'\nimport type {RollupLegacyTask, RollupReactCompilerTask, RollupTask, RollupWatchTask} from '../types'\n\nexport interface RollupConfig {\n  inputOptions: InputOptions\n  outputOptions: OutputOptions\n}\n\n/** @internal */\nexport function resolveRollupConfig(\n  ctx: BuildContext,\n  buildTask: RollupTask | RollupLegacyTask | RollupReactCompilerTask | RollupWatchTask,\n): RollupConfig {\n  const {format, runtime, target} = buildTask\n  const {config, cwd, exports: _exports, external, distPath, logger, pkg, ts} = ctx\n  const isLegacyExports = buildTask.type === 'build:legacy'\n  const isReactCompiler = buildTask.type === 'build:react-compiler'\n  const outputExt = isLegacyExports ? extMap.legacy : extMap[pkg.type || 'commonjs'][format]\n  const minify = config?.minify ?? false\n  const outDir = path.relative(cwd, distPath)\n\n  const pathAliases = Object.fromEntries(\n    Object.entries(ts.config?.options.paths || {}).map(([key, val]) => {\n      return [key, path.resolve(cwd, ts.config?.options.baseUrl || '.', val[0])]\n    }),\n  )\n\n  const entries = buildTask.entries.map((entry) => {\n    return {\n      ...entry,\n      name: path.relative(outDir, entry.output).replace(/\\.[^/.]+$/, ''),\n    }\n  }, {})\n\n  const exportIds =\n    _exports && Object.keys(_exports).map((exportPath) => path.join(pkg.name, exportPath))\n\n  const sourcePaths = _exports && Object.values(_exports).map((e) => path.resolve(cwd, e.source))\n\n  const replacements = Object.fromEntries(\n    Object.entries(config?.define || {}).map(([key, val]) => [key, JSON.stringify(val)]),\n  )\n\n  const {optimizeLodash: enableOptimizeLodash = hasDependency(pkg, 'lodash')} = config?.rollup || {}\n\n  const defaultPlugins = [\n    replace({\n      preventAssignment: true,\n      values: {\n        ...(pkg.name === '@sanity/pkg-utils'\n          ? {...replacements}\n          : {\n              'process.env.PKG_FILE_PATH': (arg) => {\n                const sourcePath = `./${path.relative(cwd, arg)}`\n                const entry = entries.find((e) => e.source === sourcePath)\n\n                if (!entry) {\n                  // eslint-disable-next-line no-console\n                  console.error(`could not find source entry: ${sourcePath}`)\n\n                  return 'null'\n                }\n\n                return JSON.stringify(\n                  path.relative(cwd, path.resolve(outDir, entry.name + outputExt)),\n                )\n              },\n              'process.env.PKG_FORMAT': JSON.stringify(format),\n              'process.env.PKG_RUNTIME': JSON.stringify(runtime),\n              'process.env.PKG_VERSION': JSON.stringify(process.env['PKG_VERSION'] || pkg.version),\n              ...replacements,\n            }),\n      },\n    }),\n    alias({\n      entries: {...pathAliases},\n    }),\n    nodeResolve({\n      browser: runtime === 'browser',\n      extensions: ['.cjs', '.mjs', '.js', '.jsx', '.json', '.node'],\n      preferBuiltins: true,\n    }),\n    commonjs(),\n    json(),\n    (isReactCompiler || config?.babel?.reactCompiler) &&\n      babel({\n        babelrc: false,\n        presets: ['@babel/preset-typescript'],\n        babelHelpers: 'bundled',\n        extensions: ['.ts', '.tsx', '.js', '.jsx'],\n        plugins: [['babel-plugin-react-compiler', config?.reactCompilerOptions || {}]],\n      }),\n    esbuild({\n      jsx: config?.jsx ?? 'automatic',\n      jsxFactory: config?.jsxFactory ?? 'createElement',\n      jsxFragment: config?.jsxFragment ?? 'Fragment',\n      jsxImportSource: config?.jsxImportSource ?? 'react',\n      target,\n      tsconfig: ctx.ts.configPath || 'tsconfig.json',\n      treeShaking: true,\n      minifySyntax: config?.minify !== false,\n      supported: {\n        'template-literal': true,\n      },\n    }),\n    Array.isArray(config?.babel?.plugins) &&\n      getBabelOutputPlugin({\n        babelrc: false,\n        plugins: config.babel.plugins,\n      }),\n    enableOptimizeLodash &&\n      optimizeLodashImports({\n        useLodashEs: format === 'esm' && hasDependency(pkg, 'lodash-es') ? true : undefined,\n        ...(typeof config?.rollup?.optimizeLodash === 'boolean'\n          ? {}\n          : config?.rollup?.optimizeLodash),\n      }),\n    minify &&\n      terser({\n        compress: {directives: false},\n        output: {\n          comments: (_node, comment) => {\n            const text = comment.value\n            const cType = comment.type\n\n            // Check if this is a multiline comment\n            if (cType === 'comment2') {\n              // Keep licensing comments\n              return /@preserve|@license|@cc_on/i.test(text)\n            }\n\n            return false\n          },\n        },\n      }),\n  ].filter(Boolean) as Plugin[]\n\n  const userPlugins = config?.rollup?.plugins\n\n  const plugins = Array.isArray(userPlugins)\n    ? defaultPlugins.concat(userPlugins)\n    : resolveConfigProperty(config?.rollup?.plugins, defaultPlugins)\n\n  const hashChunkFileNames = config?.rollup?.hashChunkFileNames ?? false\n  const chunksFolder = isReactCompiler\n    ? '_compiled'\n    : isLegacyExports\n      ? '_legacy'\n      : hashChunkFileNames\n        ? '_chunks'\n        : '_chunks-[format]'\n  const chunkFileNames = `${chunksFolder}/${hashChunkFileNames ? '[name]-[hash]' : '[name]'}${outputExt}`\n  const entryFileNames = isLegacyExports ? '[name].js' : `[name]${outputExt}`\n\n  return {\n    inputOptions: {\n      context: cwd,\n\n      external: (id, importer) => {\n        // Check if the id is a self-referencing import\n        if (exportIds?.includes(id)) {\n          return true\n        }\n\n        // Check if the id is a file path that points to an exported source file\n        if (importer && (id.startsWith('.') || id.startsWith('/'))) {\n          const idPath = path.resolve(path.dirname(importer), id)\n\n          if (sourcePaths?.includes(idPath)) {\n            logger.warn(\n              `detected self-referencing import – treating as external: ${path.relative(\n                cwd,\n                idPath,\n              )}`,\n            )\n\n            return true\n          }\n        }\n\n        const idParts = id.split('/')\n\n        const name = idParts[0].startsWith('@') ? `${idParts[0]}/${idParts[1]}` : idParts[0]\n\n        if (name && external.includes(name)) {\n          return true\n        }\n\n        return false\n      },\n\n      input: entries.reduce<{[entryAlias: string]: string}>((acc, entry) => {\n        return {...acc, [entry.name]: entry.source}\n      }, {}),\n\n      watch: {\n        chokidar: {\n          usePolling: true,\n        },\n      },\n\n      plugins,\n\n      treeshake: {\n        preset: 'recommended',\n        propertyReadSideEffects: false,\n        moduleSideEffects: 'no-external',\n        ...config?.rollup?.treeshake,\n      },\n      experimentalLogSideEffects: config?.rollup?.experimentalLogSideEffects,\n    },\n    outputOptions: {\n      chunkFileNames,\n      compact: minify,\n      dir: outDir,\n      entryFileNames,\n      esModule: true,\n      format,\n      interop: 'compat',\n      sourcemap: config?.sourcemap ?? true,\n      hoistTransitiveImports: false,\n      minifyInternalExports: minify,\n      ...config?.rollup?.output,\n    },\n  }\n}\n\nfunction hasDependency(pkg: PackageJSON, packageName: string): boolean {\n  return pkg.dependencies\n    ? packageName in pkg.dependencies\n    : pkg.peerDependencies\n      ? packageName in pkg.peerDependencies\n      : false\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {rollup} from 'rollup'\nimport {Observable} from 'rxjs'\n\nimport {createConsoleSpy} from '../../consoleSpy'\nimport type {BuildContext} from '../../core'\nimport type {RollupLegacyTask, TaskHandler} from '../types'\nimport {resolveRollupConfig} from './resolveRollupConfig'\n\n/** @internal */\nexport const rollupLegacyTask: TaskHandler<RollupLegacyTask> = {\n  name: (ctx, task) => {\n    const entries = task.entries.filter((e) => !e.path.includes('__$$bundle_'))\n\n    const targetLines = task.target.length\n      ? ['  target:', ...task.target.map((t) => `    - ${chalk.yellow(t)}`)]\n      : []\n\n    const entriesLines = entries.length\n      ? [\n          '  entries:',\n          ...entries.map((e) =>\n            [\n              '    - ',\n              `${chalk.cyan(path.join(ctx.pkg.name, e.path))}: `,\n              `${chalk.yellow(e.source)} ${chalk.gray('→')} ${chalk.yellow(e.output)}`,\n            ].join(''),\n          ),\n        ]\n      : []\n\n    // @TODO list out the root level files that are generated\n\n    return [\n      'Build legacy exports...',\n      `  format: ${chalk.yellow(task.format)}`,\n      ...targetLines,\n      ...entriesLines,\n    ].join('\\n')\n  },\n  exec: (ctx, task) => {\n    return new Observable((observer) => {\n      execPromise(ctx, task)\n        .then((result) => {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch((err) => observer.error(err))\n    })\n  },\n  complete: () => {\n    //\n  },\n  error: (_ctx, _task, err) => {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  },\n}\n\nasync function execPromise(ctx: BuildContext, task: RollupLegacyTask) {\n  const {distPath, files, logger} = ctx\n  const outDir = path.relative(ctx.cwd, distPath)\n\n  // Prevent rollup from printing directly to the console\n  const consoleSpy = createConsoleSpy({\n    onRestored: (messages) => {\n      for (const msg of messages) {\n        const text = String(msg.args[0])\n\n        if (msg.code === 'CIRCULAR_DEPENDENCY') {\n          continue // ignore\n        }\n\n        if (text.startsWith('Dynamic import can only')) {\n          continue // ignore\n        }\n\n        if (text.startsWith('Sourcemap is likely to be incorrect')) {\n          continue // ignore\n        }\n\n        if (msg.type === 'log') {\n          logger.info(...msg.args)\n        }\n\n        if (msg.type === 'warn') {\n          logger.warn(...msg.args)\n        }\n\n        if (msg.type === 'error') {\n          logger.error(...msg.args)\n        }\n      }\n    },\n  })\n\n  try {\n    const {inputOptions, outputOptions} = resolveRollupConfig(ctx, task)\n\n    // Create bundle\n    const bundle = await rollup({\n      ...inputOptions,\n      onwarn(warning) {\n        consoleSpy.messages.push({\n          type: 'warn',\n          code: warning.code,\n          args: [warning.message],\n        })\n      },\n    })\n\n    // generate output specific code in-memory\n    // you can call this function multiple times on the same bundle object\n    const {output} = await bundle.generate(outputOptions)\n\n    for (const chunkOrAsset of output) {\n      if (chunkOrAsset.type === 'asset') {\n        files.push({\n          type: 'asset',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      } else {\n        files.push({\n          type: 'chunk',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      }\n    }\n\n    // or write the bundle to disk\n    await bundle.write(outputOptions)\n\n    // closes the bundle\n    await bundle.close()\n\n    // Restore console\n    consoleSpy.restore()\n  } catch (err) {\n    // Restore console\n    consoleSpy.restore()\n    throw err\n  }\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {rollup} from 'rollup'\nimport {Observable} from 'rxjs'\n\nimport {createConsoleSpy} from '../../consoleSpy'\nimport type {BuildContext} from '../../core'\nimport type {RollupReactCompilerTask, TaskHandler} from '../types'\nimport {resolveRollupConfig} from './resolveRollupConfig'\n\n/** @internal */\nexport const rollupReactCompilerTask: TaskHandler<RollupReactCompilerTask> = {\n  name: (ctx, task) => {\n    const entries = task.entries.filter((e) => !e.path.includes('__$$bundle_'))\n\n    const targetLines = task.target.length\n      ? ['  target:', ...task.target.map((t) => `    - ${chalk.yellow(t)}`)]\n      : []\n\n    const entriesLines = entries.length\n      ? [\n          '  entries:',\n          ...entries.map((e) =>\n            [\n              '    - ',\n              `${chalk.cyan(path.join(ctx.pkg.name, e.path))}: `,\n              `${chalk.yellow(e.source)} ${chalk.gray('→')} ${chalk.yellow(e.output)}`,\n            ].join(''),\n          ),\n        ]\n      : []\n\n    // @TODO list out the root level files that are generated\n\n    return ['Build react compiler exports...', ...targetLines, ...entriesLines].join('\\n')\n  },\n  exec: (ctx, task) => {\n    return new Observable((observer) => {\n      execPromise(ctx, task)\n        .then((result) => {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch((err) => observer.error(err))\n    })\n  },\n  complete: () => {\n    //\n  },\n  error: (_ctx, _task, err) => {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  },\n}\n\nasync function execPromise(ctx: BuildContext, task: RollupReactCompilerTask) {\n  const {distPath, files, logger} = ctx\n  const outDir = path.relative(ctx.cwd, distPath)\n\n  // Prevent rollup from printing directly to the console\n  const consoleSpy = createConsoleSpy({\n    onRestored: (messages) => {\n      for (const msg of messages) {\n        const text = String(msg.args[0])\n\n        if (msg.code === 'CIRCULAR_DEPENDENCY') {\n          continue // ignore\n        }\n\n        if (text.startsWith('Dynamic import can only')) {\n          continue // ignore\n        }\n\n        if (text.startsWith('Sourcemap is likely to be incorrect')) {\n          continue // ignore\n        }\n\n        if (msg.type === 'log') {\n          logger.info(...msg.args)\n        }\n\n        if (msg.type === 'warn') {\n          logger.warn(...msg.args)\n        }\n\n        if (msg.type === 'error') {\n          logger.error(...msg.args)\n        }\n      }\n    },\n  })\n\n  try {\n    const {inputOptions, outputOptions} = resolveRollupConfig(ctx, task)\n\n    // Create bundle\n    const bundle = await rollup({\n      ...inputOptions,\n      onwarn(warning) {\n        consoleSpy.messages.push({\n          type: 'warn',\n          code: warning.code,\n          args: [warning.message],\n        })\n      },\n    })\n\n    // generate output specific code in-memory\n    // you can call this function multiple times on the same bundle object\n    const {output} = await bundle.generate(outputOptions)\n\n    for (const chunkOrAsset of output) {\n      if (chunkOrAsset.type === 'asset') {\n        files.push({\n          type: 'asset',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      } else {\n        files.push({\n          type: 'chunk',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      }\n    }\n\n    // or write the bundle to disk\n    await bundle.write(outputOptions)\n\n    // closes the bundle\n    await bundle.close()\n\n    // Restore console\n    consoleSpy.restore()\n  } catch (err) {\n    // Restore console\n    consoleSpy.restore()\n    throw err\n  }\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {rollup} from 'rollup'\nimport {Observable} from 'rxjs'\n\nimport {createConsoleSpy} from '../../consoleSpy'\nimport type {BuildContext} from '../../core'\nimport type {RollupTask, TaskHandler} from '../types'\nimport {resolveRollupConfig} from './resolveRollupConfig'\n\n/** @internal */\nexport const rollupTask: TaskHandler<RollupTask> = {\n  name: (ctx, task) => {\n    const bundleEntries = task.entries.filter((e) => e.path.includes('__$$bundle_'))\n    const entries = task.entries.filter((e) => !e.path.includes('__$$bundle_'))\n\n    const targetLines = task.target.length\n      ? [`  target:`, ...task.target.map((t) => `    - ${chalk.yellow(t)}`)]\n      : []\n\n    const bundlesLines = bundleEntries.length\n      ? [\n          '  bundles:',\n          ...bundleEntries.map((e) =>\n            [\n              `    - `,\n              `${chalk.yellow(e.source)} ${chalk.gray('→')} ${chalk.yellow(e.output)}`,\n            ].join(''),\n          ),\n        ]\n      : []\n\n    const entriesLines = entries.length\n      ? [\n          '  entries:',\n          ...entries.map((e) =>\n            [\n              `    - `,\n              `${chalk.cyan(path.join(ctx.pkg.name, e.path))}: `,\n              `${chalk.yellow(e.source)} ${chalk.gray('→')} ${chalk.yellow(e.output)}`,\n            ].join(''),\n          ),\n        ]\n      : []\n\n    return [\n      `Build javascript files...`,\n      `  format: ${chalk.yellow(task.format)}`,\n      ...targetLines,\n      ...bundlesLines,\n      ...entriesLines,\n    ].join('\\n')\n  },\n  exec: (ctx, task) => {\n    return new Observable((observer) => {\n      execPromise(ctx, task)\n        .then((result) => {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch((err) => observer.error(err))\n    })\n  },\n  complete: () => {\n    //\n  },\n  error: (_ctx, _task, err) => {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  },\n}\n\nasync function execPromise(ctx: BuildContext, task: RollupTask) {\n  const {distPath, files, logger} = ctx\n  const outDir = path.relative(ctx.cwd, distPath)\n\n  // Prevent rollup from printing directly to the console\n  const consoleSpy = createConsoleSpy({\n    onRestored: (messages) => {\n      for (const msg of messages) {\n        const text = String(msg.args[0])\n\n        if (msg.code === 'CIRCULAR_DEPENDENCY') {\n          continue // ignore\n        }\n\n        if (text.startsWith('Dynamic import can only')) {\n          continue // ignore\n        }\n\n        if (text.startsWith('Sourcemap is likely to be incorrect')) {\n          continue // ignore\n        }\n\n        if (msg.type === 'log') {\n          logger.info(...msg.args)\n        }\n\n        if (msg.type === 'warn') {\n          logger.warn(...msg.args)\n        }\n\n        if (msg.type === 'error') {\n          logger.error(...msg.args)\n        }\n      }\n    },\n  })\n\n  try {\n    const {inputOptions, outputOptions} = resolveRollupConfig(ctx, task)\n\n    // Create bundle\n    const bundle = await rollup({\n      ...inputOptions,\n      onwarn(warning) {\n        consoleSpy.messages.push({\n          type: 'warn',\n          code: warning.code,\n          args: [warning.message],\n        })\n      },\n    })\n\n    // generate output specific code in-memory\n    // you can call this function multiple times on the same bundle object\n    const {output} = await bundle.generate(outputOptions)\n\n    for (const chunkOrAsset of output) {\n      if (chunkOrAsset.type === 'asset') {\n        files.push({\n          type: 'asset',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      } else {\n        files.push({\n          type: 'chunk',\n          path: path.resolve(outDir, chunkOrAsset.fileName),\n        })\n      }\n    }\n\n    // or write the bundle to disk\n    await bundle.write(outputOptions)\n\n    // closes the bundle\n    await bundle.close()\n\n    // Restore console\n    consoleSpy.restore()\n  } catch (err) {\n    // Restore console\n    consoleSpy.restore()\n    throw err\n  }\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {type RollupWatcherEvent, type RollupWatchOptions, watch as rollupWatch} from 'rollup'\nimport {Observable} from 'rxjs'\n\nimport type {RollupWatchTask, TaskHandler} from '../types'\nimport {resolveRollupConfig} from './resolveRollupConfig'\n\n/** @internal */\nexport const rollupWatchTask: TaskHandler<RollupWatchTask, RollupWatcherEvent> = {\n  name: (ctx, task) =>\n    `build javascript files (target ${task.target.join(' + ')}, format ${\n      task.format\n    })\\n       ${task.entries\n      .map((e) => `${chalk.blue(path.join(ctx.pkg.name, e.path))}: ${e.source} -> ${e.output}`)\n      .join('\\n       ')}`,\n  exec: (ctx, task) => {\n    const {inputOptions, outputOptions} = resolveRollupConfig(ctx, task)\n\n    return new Observable((observer) => {\n      const watchOptions: RollupWatchOptions = {\n        ...inputOptions,\n        output: outputOptions,\n      }\n\n      const watcher = rollupWatch(watchOptions)\n\n      watcher.on('event', (event) => {\n        observer.next(event)\n      })\n\n      return () => {\n        watcher.close()\n      }\n    })\n  },\n  complete: (ctx, task, event) => {\n    const {logger} = ctx\n\n    if (event.code === 'BUNDLE_END') {\n      logger.success(\n        `build javascript files (target ${task.target.join(' + ')}, format ${\n          task.format\n        })\\n       ${task.entries\n          .map((e) => `${chalk.blue(path.join(ctx.pkg.name, e.path))}: ${e.source} -> ${e.output}`)\n          .join('\\n       ')}`,\n      )\n      logger.log('')\n\n      return\n    }\n\n    if (event.code === 'BUNDLE_START') {\n      return\n    }\n\n    if (event.code === 'END') {\n      return\n    }\n\n    if (event.code === 'ERROR') {\n      logger.error(event.code, event)\n\n      return\n    }\n\n    if (event.code === 'START') {\n      return\n    }\n  },\n  error: (ctx, _task, err) => {\n    const {logger} = ctx\n\n    if (err instanceof Error) {\n      logger.log(err)\n    }\n  },\n}\n","import {dtsTask, dtsWatchTask} from './dts'\nimport {rollupLegacyTask, rollupReactCompilerTask, rollupTask, rollupWatchTask} from './rollup'\nimport type {BuildTaskHandlers, WatchTaskHandlers} from './types'\n\nexport * from './dts'\nexport * from './rollup'\nexport * from './types'\n\n/** @internal */\nexport const buildTaskHandlers: BuildTaskHandlers = {\n  'build:dts': dtsTask,\n  'build:js': rollupTask,\n  'build:legacy': rollupLegacyTask,\n  'build:react-compiler': rollupReactCompilerTask,\n}\n\n/** @internal */\nexport const watchTaskHandlers: WatchTaskHandlers = {\n  'watch:dts': dtsWatchTask,\n  'watch:js': rollupWatchTask,\n}\n","import path from 'node:path'\n\nimport rimraf from 'rimraf'\n\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {createLogger} from './logger'\nimport {resolveBuildContext} from './resolveBuildContext'\nimport {resolveBuildTasks} from './resolveBuildTasks'\nimport {createSpinner} from './spinner'\nimport {type BuildTask, buildTaskHandlers, type TaskHandler} from './tasks'\n\n/**\n * Build the distribution files of a npm package.\n *\n * @example\n * ```ts\n * import {build} from '@sanity/pkg-utils'\n *\n * build({\n *   cwd: process.cwd(),\n *   tsconfig: 'tsconfig.dist.json,\n * }).then(() => {\n *   console.log('successfully built')\n * }).catch((err) => {\n *   console.log(`build error: ${err.message}`)\n * })\n * ```\n *\n * @public\n */\nexport async function build(options: {\n  cwd: string\n  emitDeclarationOnly?: boolean\n  strict?: boolean\n  tsconfig?: string\n  clean?: boolean\n}): Promise<void> {\n  const {\n    cwd,\n    emitDeclarationOnly,\n    strict = false,\n    tsconfig: tsconfigOption,\n    clean = false,\n  } = options\n  const logger = createLogger()\n\n  const config = await loadConfig({cwd})\n\n  const legacyExports = config?.legacyExports ?? false\n  const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n\n  const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n\n  const ctx = await resolveBuildContext({\n    config,\n    cwd,\n    emitDeclarationOnly,\n    logger,\n    pkg,\n    strict,\n    tsconfig,\n  })\n\n  if (clean) {\n    logger.log(\n      `Deleting the \\`dist\\` folder: './${path.relative(cwd, ctx.distPath)}' before building...`,\n    )\n    await rimraf(ctx.distPath)\n  }\n\n  const buildTasks = resolveBuildTasks(ctx)\n\n  for (const task of buildTasks) {\n    const handler = buildTaskHandlers[task.type] as TaskHandler<BuildTask>\n    const taskName = handler.name(ctx, task)\n\n    const spinner = createSpinner(taskName)\n\n    try {\n      const result = await handler.exec(ctx, task).toPromise()\n\n      spinner.complete()\n      ctx.logger.log()\n\n      handler.complete(ctx, task, result)\n    } catch (err) {\n      spinner.error()\n\n      if (err instanceof Error) {\n        const RE_CWD = new RegExp(`${cwd}`, 'g')\n\n        ctx.logger.error(err.message.replace(RE_CWD, '.'))\n        ctx.logger.log()\n      }\n\n      handler.error(ctx, task, err)\n\n      process.exit(1)\n    }\n  }\n}\n","import {statSync} from 'node:fs'\n\nimport prettyBytes from 'pretty-bytes'\n\nexport function getFilesize(file: string): string {\n  const stats = statSync(file)\n\n  return prettyBytes(stats.size)\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport treeify from 'treeify'\n\nimport type {BuildContext, PkgExport} from './core'\nimport {fileExists} from './fileExists'\nimport {getFilesize} from './getFilesize'\n\nfunction getFileInfo(cwd: string, filePath: string) {\n  const p = path.resolve(cwd, filePath)\n  const exists = fileExists(p)\n  const size = exists ? getFilesize(p) : undefined\n\n  return {exists, size}\n}\n\nexport function printPackageTree(ctx: BuildContext): void {\n  const {cwd, exports, logger, pkg} = ctx\n\n  if (!exports) return\n\n  logger.log(`${chalk.blue(pkg.name)}@${chalk.green(pkg.version)}`)\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const tree: Record<string, unknown> = {}\n\n  if (pkg.type) {\n    tree['type'] = chalk.yellow(pkg.type)\n  }\n\n  if (pkg.bin) {\n    tree['bin'] = Object.fromEntries(\n      Object.entries(pkg.bin).map(([name, file]) => [chalk.cyan(name), fileInfo(file)]),\n    )\n  }\n\n  function fileInfo(file: string) {\n    const info = getFileInfo(cwd, file)\n\n    if (!info.size) {\n      return `${chalk.gray(file)} ${chalk.red('does not exist')}`\n    }\n\n    return `${chalk.yellow(file)} ${chalk.gray(info.size)}`\n  }\n\n  tree['exports'] = Object.fromEntries(\n    Object.entries(exports)\n      .filter(([, entry]) => entry._exported)\n      .map(([exportPath, entry]) => {\n        const exp: Omit<PkgExport, '_exported'> = {\n          source: fileInfo(entry.source),\n          browser: undefined,\n          require: undefined,\n          node: undefined,\n          import: undefined,\n          default: fileInfo(entry.default),\n        }\n\n        if (entry.browser) {\n          exp.browser = {source: fileInfo(entry.browser.source)}\n\n          if (entry.browser.import) exp.browser.import = fileInfo(entry.browser.import)\n          if (entry.browser.require) exp.browser.require = fileInfo(entry.browser.require)\n        } else {\n          delete exp.browser\n        }\n\n        if (entry.require) {\n          exp.require = fileInfo(entry.require)\n        } else {\n          delete exp.require\n        }\n\n        if (entry.node) {\n          exp.node = {}\n\n          if (entry.node.source) exp.node.source = fileInfo(entry.node.source)\n          if (entry.node.import) exp.node.import = fileInfo(entry.node.import)\n          if (entry.node.require) exp.node.require = fileInfo(entry.node.require)\n        } else {\n          delete exp.node\n        }\n\n        if (entry.import) {\n          exp.import = fileInfo(entry.import)\n        } else {\n          delete exp.import\n        }\n\n        return [chalk.cyan(path.join(pkg.name, exportPath)), exp]\n      }),\n  )\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  logger.log(treeify.asTree(tree as Record<string, any>, true, true))\n}\n","import path from 'node:path'\n\nimport esbuild, {type BuildFailure, type Message} from 'esbuild'\n\nimport {createConsoleSpy} from './consoleSpy'\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {fileExists} from './fileExists'\nimport {createLogger, type Logger} from './logger'\nimport {printPackageTree} from './printPackageTree'\nimport {resolveBuildContext} from './resolveBuildContext'\n\n/** @public */\nexport async function check(options: {\n  cwd: string\n  strict?: boolean\n  tsconfig?: string\n}): Promise<void> {\n  const {cwd, strict = false, tsconfig: tsconfigOption} = options\n  const logger = createLogger()\n\n  const config = await loadConfig({cwd})\n  const legacyExports = config?.legacyExports ?? false\n  const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n  const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n  const ctx = await resolveBuildContext({config, cwd, logger, pkg, strict, tsconfig})\n\n  printPackageTree(ctx)\n\n  if (strict) {\n    const missingFiles: string[] = []\n\n    // Check if there are missing files\n    for (const [, exp] of Object.entries(ctx.exports || {})) {\n      if (exp.source && !fileExists(path.resolve(cwd, exp.source))) {\n        missingFiles.push(exp.source)\n      }\n\n      if (exp.require && !fileExists(path.resolve(cwd, exp.require))) {\n        missingFiles.push(exp.require)\n      }\n\n      if (exp.import && !fileExists(path.resolve(cwd, exp.import))) {\n        missingFiles.push(exp.import)\n      }\n    }\n\n    if (ctx.pkg.types && !fileExists(path.resolve(cwd, ctx.pkg.types))) {\n      missingFiles.push(ctx.pkg.types)\n    }\n\n    if (missingFiles.length) {\n      logger.error(`missing files: ${missingFiles.join(', ')}`)\n      process.exit(1)\n    }\n\n    // Check if the files are resolved\n    const exportPaths: {require: string[]; import: string[]} = {\n      require: [],\n      import: [],\n    }\n\n    for (const exp of Object.values(ctx.exports || {})) {\n      if (!exp._exported) continue\n      if (exp.require) exportPaths.require.push(exp.require)\n      if (exp.import) exportPaths.import.push(exp.import)\n    }\n\n    const external = [\n      ...Object.keys(pkg.dependencies || {}),\n      ...Object.keys(pkg.devDependencies || {}),\n    ]\n\n    const consoleSpy = createConsoleSpy()\n\n    if (exportPaths.import.length) {\n      checkExports(exportPaths.import, {cwd, external, format: 'esm', logger})\n    }\n\n    if (exportPaths.require.length) {\n      checkExports(exportPaths.require, {cwd, external, format: 'cjs', logger})\n    }\n\n    consoleSpy.restore()\n  }\n}\n\nasync function checkExports(\n  exportPaths: string[],\n  options: {cwd: string; external: string[]; format: 'esm' | 'cjs'; logger: Logger},\n) {\n  const {cwd, external, format, logger} = options\n\n  const code = exportPaths\n    .map((id) => (format ? `import('${id}');` : `require('${id}');`))\n    .join('\\n')\n\n  try {\n    const esbuildResult = await esbuild.build({\n      bundle: true,\n      external,\n      format,\n      logLevel: 'silent',\n      // otherwise output maps to stdout as we're using stdin\n      outfile: '/dev/null',\n      platform: 'node',\n      stdin: {\n        contents: code,\n        loader: 'js',\n        resolveDir: cwd,\n      },\n    })\n\n    if (esbuildResult.errors.length > 0) {\n      for (const msg of esbuildResult.errors) {\n        printEsbuildMessage(logger.warn, msg)\n\n        logger.log()\n      }\n\n      process.exit(1)\n    }\n\n    const esbuildWarnings = esbuildResult.warnings.filter((msg) => {\n      !(msg.detail || msg.text).includes(`does not affect esbuild's own target setting`)\n    })\n\n    for (const msg of esbuildWarnings) {\n      printEsbuildMessage(logger.warn, msg)\n\n      logger.log()\n    }\n  } catch (err) {\n    if (isEsbuildFailure(err)) {\n      const {errors} = err\n\n      for (const msg of errors) {\n        printEsbuildMessage(logger.error, msg)\n\n        logger.log()\n      }\n    } else if (err instanceof Error) {\n      logger.error(err.stack || err.message)\n\n      logger.log()\n    } else {\n      logger.error(`${err}`)\n\n      logger.log()\n    }\n\n    process.exit(1)\n  }\n}\n\nfunction printEsbuildMessage(log: (...args: unknown[]) => void, msg: esbuild.Message) {\n  if (msg.location) {\n    log(\n      [\n        `${msg.detail || msg.text}\\n`,\n        `${msg.location.line} | ${msg.location.lineText}\\n`,\n        `in ./${msg.location.file}:${msg.location.line}:${msg.location.column}`,\n      ].join(''),\n    )\n  } else {\n    log(msg.detail || msg.text)\n  }\n}\n\nfunction isEsbuildFailure(err: unknown): err is BuildFailure {\n  return (\n    err instanceof Error &&\n    'errors' in err &&\n    Array.isArray(err.errors) &&\n    err.errors.every(isEsbuildMessage) &&\n    'warnings' in err &&\n    Array.isArray(err.warnings) &&\n    err.warnings.every(isEsbuildMessage)\n  )\n}\n\nfunction isEsbuildMessage(msg: unknown): msg is Message {\n  return (\n    typeof msg === 'object' &&\n    msg !== null &&\n    'text' in msg &&\n    typeof msg.text === 'string' &&\n    'location' in msg &&\n    (msg.location === null || typeof msg.location === 'object')\n  )\n}\n","import {readdir} from 'node:fs/promises'\n\nexport async function isEmptyDirectory(dirPath: string): Promise<boolean> {\n  return (await readdir(dirPath)).length === 0\n}\n","const overridableDefaults = {\n  endOfLine: \"lf\",\n  tabWidth: 2,\n  useTabs: !1\n}, config = {\n  ...overridableDefaults,\n  printWidth: 100,\n  semi: !1,\n  singleQuote: !0,\n  quoteProps: \"consistent\",\n  bracketSpacing: !1,\n  plugins: [\"prettier-plugin-packagejson\"],\n  overrides: [\n    {\n      files: [\"*.json5\"],\n      options: {\n        quoteProps: \"preserve\",\n        singleQuote: !1\n      }\n    },\n    {\n      files: [\"*.yml\"],\n      options: {\n        singleQuote: !1\n      }\n    }\n  ]\n};\nexport {\n  config as default\n};\n//# sourceMappingURL=index.js.map\n","import {resolve} from 'node:path'\n\nimport prettierConfig from '@sanity/prettier-config'\nimport getLatestVersion from 'get-latest-version'\nimport gitUrlParse from 'git-url-parse'\nimport {outdent} from 'outdent'\nimport parseGitConfig from 'parse-git-config'\nimport prettier, {type Config as PrettierConfig} from 'prettier'\n\nimport {\n  defineTemplateOption,\n  isRecord,\n  type PackageJSON,\n  type PkgTemplate,\n  type PkgTemplateFile,\n} from '../../core'\n\nconst RE_NAME = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)\\/)?[a-z0-9-~][a-z0-9-._~]*$/i\n\nexport const defaultTemplate: PkgTemplate = async ({cwd, logger, packagePath}) => {\n  const gitConfig = await parseGitConfig({cwd, type: 'global'})\n\n  return {\n    options: [\n      defineTemplateOption<{owner: string; name: string}>({\n        name: 'repo',\n        type: 'string',\n        description: 'git url',\n        validate: (v) => {\n          if (!v) return true\n\n          try {\n            gitUrlParse(v)\n\n            return true\n          } catch (err) {\n            return 'invalid git url'\n          }\n        },\n        parse: (v) => {\n          if (!v) return null\n\n          const result = gitUrlParse(v)\n\n          return {source: result.source, owner: result.owner, name: result.name}\n        },\n      }),\n      defineTemplateOption({\n        name: 'pkgName',\n        type: 'string',\n        description: 'package name',\n        initial: (options) => options['repo']?.name || undefined,\n        validate: (v) => {\n          if (!v) return 'package name is required'\n\n          const match = RE_NAME.exec(v)\n\n          if (!match) {\n            return 'invalid package name'\n          }\n\n          return true\n        },\n        parse: (v) => {\n          if (!v) {\n            throw new Error('package name is required')\n          }\n\n          const match = RE_NAME.exec(v)\n\n          if (!match) {\n            throw new Error('invalid package name')\n          }\n\n          const [scope, name] = v.split('/')\n\n          return {scope, name, fullName: v}\n        },\n      }),\n      defineTemplateOption({\n        name: 'description',\n        type: 'string',\n        description: 'package description',\n      }),\n      defineTemplateOption({\n        name: 'authorName',\n        type: 'string',\n        description: 'package author name',\n        initial: gitConfig?.['user']?.name,\n      }),\n      defineTemplateOption({\n        name: 'authorEmail',\n        type: 'string',\n        description: 'package author email',\n        initial: gitConfig?.['user']?.email,\n      }),\n      defineTemplateOption({\n        name: 'license',\n        type: 'string',\n        description: 'package license',\n        initial: 'MIT',\n        validate: (v) => {\n          if (!v) return 'license is required'\n\n          return true\n        },\n      }),\n    ],\n\n    features: [\n      {\n        name: 'eslint',\n        optional: true,\n        initial: true,\n      },\n      {\n        name: 'prettier',\n        optional: true,\n        initial: true,\n      },\n      {\n        name: 'typescript',\n        optional: true,\n        initial: true,\n      },\n    ],\n\n    async getFiles(options, features) {\n      const {pkgName, repo} = options\n      const {fullName: name} = pkgName\n\n      const author =\n        [options['authorName'], options['authorEmail'] && `<${options['authorEmail']}>`]\n          .filter(Boolean)\n          .join(' ') ?? undefined\n\n      const pkgJson: PackageJSON & {\n        prettier?: '@sanity/prettier-config'\n        ['lint-staged']?: Record<string, string[]>\n      } = {\n        name,\n        'version': '0.0.0',\n        'description': options['description'] ?? undefined,\n        'keywords': [],\n        'homepage': undefined,\n        'bugs': undefined,\n        'repository': undefined,\n        'license': options['license'],\n        author,\n        'sideEffects': false,\n        'type': 'module',\n        'exports': {\n          '.': {\n            source: features['typescript'] ? './src/index.ts' : './src/index.js',\n            require: './dist/index.cjs',\n            default: './dist/index.js',\n          },\n          './package.json': './package.json',\n        },\n        'main': './dist/index.cjs',\n        'module': './dist/index.js',\n        'types': undefined,\n        'files': ['dist', 'src'],\n        'scripts': {\n          build: 'pkg build --strict --clean --check',\n          format: features['prettier'] ? 'prettier --write --cache --ignore-unknown .' : undefined,\n        },\n        'lint-staged': features['prettier']\n          ? {\n              '*': ['prettier --write --cache --ignore-unknown'],\n            }\n          : undefined,\n        'browserslist': 'extends @sanity/browserslist-config',\n        'prettier': features['prettier'] ? '@sanity/prettier-config' : undefined,\n        'dependencies': {},\n        'devDependencies': {\n          '@sanity/pkg-utils': '^6',\n          '@sanity/prettier-config': features['prettier'] ? '^1' : undefined,\n          '@typescript-eslint/eslint-plugin': undefined,\n          '@typescript-eslint/parser': undefined,\n          'eslint': undefined,\n          'eslint-config-prettier': undefined,\n          'eslint-plugin-import': undefined,\n          'eslint-plugin-prettier': undefined,\n          'eslint-plugin-simple-import-sort': undefined,\n          'lint-staged': '^15',\n          'prettier': features['prettier'] ? '^3' : undefined,\n          'typescript': undefined,\n        },\n        'engines': {\n          node: '>=18.0.0',\n        },\n      }\n\n      const files: PkgTemplateFile[] = []\n\n      // .editorconfig\n      files.push({\n        name: '.editorconfig',\n        contents: outdent`\n        root = true\n\n        [*]\n        charset = utf-8\n        indent_style = space\n        indent_size = 2\n        end_of_line = lf\n        insert_final_newline = true\n        trim_trailing_whitespace = true\n        `,\n      })\n\n      // .gitignore\n      files.push({\n        name: '.gitignore',\n        contents: outdent`\n        *.local\n        *.log\n        *.tgz\n\n        .DS_Store\n        dist\n        etc\n        node_modules\n        `,\n      })\n\n      if (features['prettier']) {\n        files.push({\n          name: '.prettierignore',\n          contents: outdent`\n          dist\n          pnpm-lock.yaml\n          `,\n        })\n      }\n\n      if (repo) {\n        pkgJson.repository = {\n          type: 'git',\n          url: `git+ssh://git@${repo.source}/${repo.owner}/${repo.name}.git`,\n        }\n        pkgJson.bugs = {\n          url: `https://${repo.source}/${repo.owner}/${repo.name}/issues`,\n        }\n        pkgJson.homepage = `https://${repo.source}/${repo.owner}/${repo.name}#readme`\n      }\n\n      if (features['typescript']) {\n        pkgJson.types = './dist/index.d.ts'\n\n        pkgJson.scripts = {\n          ...pkgJson.scripts,\n          ['ts:check']: 'tsc --noEmit',\n        }\n\n        const devDependencies = pkgJson.devDependencies\n\n        if (isRecord(devDependencies)) {\n          devDependencies['typescript'] = '^5.4'\n        }\n      }\n\n      if (features['eslint']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const eslintConfig: any = {\n          root: true,\n          env: {\n            browser: true,\n            es6: true,\n            node: true,\n          },\n          extends: [\n            'eslint:recommended',\n            features['prettier'] ? 'plugin:prettier/recommended' : undefined,\n          ].filter(Boolean),\n          parserOptions: {\n            ecmaVersion: 2020,\n            sourceType: 'module',\n          },\n          plugins: [\n            'import',\n            'simple-import-sort',\n            features['prettier'] ? 'prettier' : undefined,\n          ].filter(Boolean),\n          rules: {\n            'no-console': 'error',\n            'no-shadow': 'error',\n            'no-warning-comments': ['warn', {location: 'start', terms: ['todo', 'fixme']}],\n            'quote-props': ['warn', 'consistent-as-needed'],\n            'simple-import-sort/exports': 'warn',\n            'simple-import-sort/imports': 'warn',\n            'strict': ['warn', 'global'],\n          },\n        }\n\n        files.push({\n          name: '.eslintignore',\n          contents: outdent`\n          dist\n          `,\n        })\n\n        pkgJson.scripts = {\n          ...pkgJson.scripts,\n          lint: features['typescript']\n            ? 'eslint . --ext .cjs,.js,.ts,.tsx'\n            : 'eslint . --ext .cjs,.js',\n        }\n\n        pkgJson.devDependencies = {\n          ...pkgJson.devDependencies,\n          'eslint': '^8',\n          'eslint-config-prettier': features['prettier'] ? '^9' : undefined,\n          'eslint-plugin-import': '^2',\n          'eslint-plugin-prettier': features['prettier'] ? '^5' : undefined,\n          'eslint-plugin-simple-import-sort': '^12',\n        }\n\n        if (features['typescript']) {\n          pkgJson.devDependencies = {\n            ...pkgJson.devDependencies,\n            '@typescript-eslint/eslint-plugin': '^7',\n            '@typescript-eslint/parser': '^7',\n          }\n\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const eslintConfigOverride: any = {\n            files: ['**/*.ts', '**/*.tsx'],\n            parser: '@typescript-eslint/parser',\n            parserOptions: {\n              project: ['./tsconfig.json'],\n            },\n            extends: [\n              'eslint:recommended',\n              features['prettier'] ? 'plugin:prettier/recommended' : undefined,\n              'plugin:@typescript-eslint/eslint-recommended',\n              'plugin:@typescript-eslint/recommended',\n            ].filter(Boolean),\n            plugins: [\n              'import',\n              '@typescript-eslint',\n              'simple-import-sort',\n              features['prettier'] ? 'prettier' : undefined,\n            ].filter(Boolean),\n            rules: {\n              '@typescript-eslint/explicit-module-boundary-types': 'error',\n              '@typescript-eslint/interface-name-prefix': 'off',\n              '@typescript-eslint/member-delimiter-style': 'off',\n              '@typescript-eslint/no-empty-interface': 'off',\n            },\n          }\n\n          eslintConfig.overrides = [eslintConfigOverride]\n        }\n\n        files.push({\n          name: '.eslintrc.cjs',\n          contents: await format(\n            resolve(packagePath, '.eslintrc.cjs'),\n            outdent`\n            'use strict'\n\n            /** @type import('eslint').Linter.Config */\n            module.exports = ${JSON.stringify(eslintConfig, null, 2)}\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      if (features['typescript']) {\n        files.push({\n          name: 'tsconfig.settings.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.settings.json'),\n            outdent`\n            {\n              \"extends\": \"@sanity/pkg-utils/tsconfig/strictest.json\",\n              \"compilerOptions\": {\n                \"rootDir\": \".\",\n                \"outDir\": \"./dist\"\n              }\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'tsconfig.dist.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.dist.json'),\n            outdent`\n            {\n              \"extends\": \"./tsconfig.settings\",\n              \"include\": [\"./src\"],\n              \"exclude\": [\"./src/**/*.test.ts\"]\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'tsconfig.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.json'),\n            outdent`\n            {\n              \"extends\": \"./tsconfig.settings\",\n              \"include\": [\"./**/*.cjs\", \"./**/*.ts\", \"./**/*.tsx\"],\n              \"exclude\": [\"./node_modules\"]\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      // source file\n      if (features['typescript']) {\n        files.push({\n          name: 'package.config.ts',\n          contents: await format(\n            resolve(packagePath, 'package.config.ts'),\n            outdent`\n            import {defineConfig} from '@sanity/pkg-utils'\n\n            // https://github.com/sanity-io/pkg-utils#configuration\n            export default defineConfig({\n              // the path to the tsconfig file for distributed builds\n              tsconfig: 'tsconfig.dist.json',\n            })\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'src/index.ts',\n          contents: await format(\n            resolve(packagePath, 'src/index.ts'),\n            outdent`\n            /** @public */\n            export function main(): void {\n              //\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      } else {\n        files.push({\n          name: 'package.config.js',\n          contents: await format(\n            resolve(packagePath, 'package.config.js'),\n            outdent`\n            import {defineConfig} from '@sanity/pkg-utils'\n\n            export default defineConfig({\n              extract: {\n                rules: {\n                  // do not require internal members to be prefixed with \\`_\\`\n                  'ae-internal-missing-underscore': 'off',\n                },\n              },\n            })\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'src/index.js',\n          contents: await format(\n            resolve(packagePath, 'src/index.js'),\n            outdent`\n            /** @public */\n            export function main() {\n              //\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      // Resolve latest dependencies\n      try {\n        pkgJson.dependencies = await resolveLatestDeps(pkgJson.dependencies ?? {})\n      } catch (error) {\n        logger.warn(error instanceof Error ? error.message : error)\n      }\n\n      // Resolve latest devDependencies\n      try {\n        pkgJson.devDependencies = await resolveLatestDeps(pkgJson.devDependencies ?? {})\n      } catch (error) {\n        logger.warn(error instanceof Error ? error.message : error)\n      }\n\n      files.push({\n        name: 'package.json',\n        contents: await format(\n          resolve(packagePath, 'package.json'),\n          JSON.stringify(pkgJson, null, 2),\n          prettierConfig,\n        ),\n      })\n\n      return files\n    },\n  }\n}\n\nfunction format(filepath: string, input: string, prettierOptions: PrettierConfig | undefined) {\n  return prettier.format(input, {...prettierOptions, plugins: [], filepath})\n}\n\nasync function resolveLatestDeps(deps: Record<string, string | undefined>) {\n  const depsEntries = Object.entries(deps)\n  const latestDeps: Record<string, string> = {}\n\n  for (const entry of depsEntries) {\n    const [name, version] = entry\n\n    if (version) {\n      const latestVersion = await getLatestVersion(name, version)\n\n      latestDeps[name] = latestVersion ? `^${latestVersion}` : version\n    }\n  }\n\n  return latestDeps\n}\n","import {lstat} from 'node:fs/promises'\nimport {resolve} from 'node:path'\n\nimport {mkdirp} from 'mkdirp'\n\nimport {createFromTemplate} from './core/template'\nimport {fileExists} from './fileExists'\nimport {isEmptyDirectory} from './isEmptyDirectory'\nimport {createLogger} from './logger'\nimport {defaultTemplate} from './templates'\n\n/** @public */\nexport async function init(options: {cwd: string; path: string}): Promise<void> {\n  if (!options.cwd) {\n    throw new Error('Missing required option: cwd')\n  }\n\n  if (!options.path) {\n    throw new Error('Missing required option: path')\n  }\n\n  const logger = createLogger()\n\n  const packagePath = resolve(options.cwd, options.path)\n\n  await ensurePackagePath(packagePath)\n\n  await createFromTemplate({\n    cwd: options.cwd,\n    logger,\n    template: defaultTemplate,\n    packagePath,\n  })\n}\n\nasync function ensurePackagePath(packagePath: string): Promise<void> {\n  const exists = fileExists(packagePath)\n\n  if (!exists) {\n    await mkdirp(packagePath)\n\n    return\n  }\n\n  const dir = (await lstat(packagePath)).isDirectory()\n\n  if (!dir) {\n    throw new Error('the package path is a file, not a directory')\n  }\n\n  const empty = await isEmptyDirectory(packagePath)\n\n  if (!empty) {\n    throw new Error('the package directory is not empty')\n  }\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\n\nimport type {BuildContext, PkgExport, PkgFormat, PkgRuntime} from './core'\nimport type {DtsWatchTask, RollupTaskEntry, RollupWatchTask, WatchTask} from './tasks'\nimport {getTargetPaths} from './tasks/dts/getTargetPaths'\n\n/** @internal */\nexport function resolveWatchTasks(ctx: BuildContext): WatchTask[] {\n  const {config, cwd, pkg, target} = ctx\n  const tasks: WatchTask[] = []\n\n  const exports = Object.entries(ctx.exports || {}).map(\n    ([_path, exp]) => ({_path, ...exp}) as PkgExport & {_path: string},\n  )\n\n  const dtsTask: DtsWatchTask = {\n    type: 'watch:dts',\n    entries: [],\n  }\n\n  const rollupTasks: Record<string, RollupWatchTask> = {}\n\n  function addRollupTaskEntry(format: PkgFormat, runtime: PkgRuntime, entry: RollupTaskEntry) {\n    const buildId = `${format}:${runtime}`\n\n    if (rollupTasks[buildId]) {\n      rollupTasks[buildId].entries.push(entry)\n    } else {\n      rollupTasks[buildId] = {\n        type: 'watch:js',\n        buildId,\n        entries: [entry],\n        runtime,\n        format,\n        target: target[runtime],\n      }\n    }\n  }\n\n  // Parse `dts` tasks\n  for (const exp of exports) {\n    const importId = path.join(pkg.name, exp._path)\n\n    if (exp.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.source,\n        targetPaths: getTargetPaths(pkg.type, exp),\n      })\n    }\n\n    if (exp.browser?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.browser.source,\n        targetPaths: getTargetPaths(pkg.type, exp.browser),\n      })\n    }\n\n    if (exp.node?.source?.endsWith('.ts')) {\n      dtsTask.entries.push({\n        importId,\n        exportPath: exp._path,\n        sourcePath: exp.node.source,\n        targetPaths: getTargetPaths(pkg.type, exp.node),\n      })\n    }\n  }\n\n  // Parse rollup:commonjs:* tasks\n  for (const exp of exports) {\n    const output = exp.require\n\n    if (!output) continue\n\n    addRollupTaskEntry('commonjs', ctx.runtime, {\n      path: exp._path,\n      source: exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:commonjs:browser tasks\n  for (const exp of exports) {\n    const output = exp.browser?.require\n\n    if (!output) continue\n\n    addRollupTaskEntry('commonjs', 'browser', {\n      path: exp._path,\n      source: exp.browser?.source || exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:esm:* tasks\n  for (const exp of exports) {\n    const output = exp.import\n\n    if (!output) continue\n\n    addRollupTaskEntry('esm', ctx.runtime, {\n      path: exp._path,\n      source: exp.source,\n      output,\n    })\n  }\n\n  // Parse rollup:esm:browser tasks\n  for (const exp of exports) {\n    const output = exp.browser?.import\n\n    if (!output) continue\n\n    addRollupTaskEntry('esm', 'browser', {\n      path: exp._path,\n      source: exp.browser?.source || exp.source,\n      output,\n    })\n  }\n\n  if (dtsTask.entries.length) {\n    tasks.push(dtsTask)\n  }\n\n  tasks.push(...Object.values(rollupTasks))\n\n  // Write legacy exports files\n  if (config?.legacyExports) {\n    for (const exp of exports) {\n      if (exp._exported && exp._path !== '.') {\n        const relativeTargetPath = (exp.browser?.import || exp.import || '').replace(\n          /\\.[^/.]+$/,\n          '',\n        )\n\n        if (relativeTargetPath) {\n          fs.writeFileSync(\n            path.resolve(cwd, `${exp._path}.js`),\n            [`// AUTO-GENERATED – DO NOT EDIT`, `export * from '${relativeTargetPath}'`, ``].join(\n              '\\n',\n            ),\n          )\n        }\n      }\n    }\n  }\n\n  return tasks\n}\n","import path from 'node:path'\n\nimport globby from 'globby'\n\nexport function globFiles(patterns: string[]): Promise<string[]> {\n  return globby(patterns.map((pattern) => pattern.split(path.sep).join(path.posix.sep)))\n}\n","import chokidar from 'chokidar'\nimport type {EventName} from 'chokidar/handler.js'\nimport {Observable} from 'rxjs'\n\nexport interface FileEvent {\n  type: EventName\n  file: string\n}\n\nexport function watchFiles(patterns: string[]): Observable<FileEvent> {\n  return new Observable((observer) => {\n    const watcher = chokidar.watch(patterns, {\n      ignoreInitial: true,\n    })\n\n    function handleFileEvent(type: EventName, file: string | Error) {\n      if (type === 'error' || file instanceof Error) {\n        observer.error(file)\n      } else {\n        observer.next({type, file})\n      }\n    }\n\n    watcher.on('all', handleFileEvent)\n\n    return () => {\n      watcher.off('all', handleFileEvent)\n      watcher.close()\n    }\n  })\n}\n","import path from 'node:path'\n\nimport type {Observable} from 'rxjs'\nimport {distinctUntilChanged, scan, startWith} from 'rxjs/operators'\n\nimport {globFiles} from './globFiles'\nimport type {Logger} from './logger'\nimport {watchFiles} from './watchFiles'\n\nexport async function watchConfigFiles(options: {\n  cwd: string\n  logger: Logger\n}): Promise<Observable<string[]>> {\n  const {cwd, logger} = options\n\n  const initialFiles = await globFiles([\n    path.resolve(cwd, 'package.json'),\n    path.resolve(cwd, 'package.config.cjs'),\n    path.resolve(cwd, 'package.config.js'),\n    path.resolve(cwd, 'package.config.ts'),\n  ])\n\n  const fileEvent$ = watchFiles([\n    path.resolve(cwd, 'package.json'),\n    path.resolve(cwd, 'package.config.cjs'),\n    path.resolve(cwd, 'package.config.js'),\n    path.resolve(cwd, 'package.config.ts'),\n  ])\n\n  return fileEvent$.pipe(\n    scan((files, fileEvent) => {\n      if (fileEvent.type === 'add') {\n        return files.concat(fileEvent.file)\n      }\n\n      if (fileEvent.type === 'unlink') {\n        return files.filter((f) => f !== fileEvent.file)\n      }\n\n      if (fileEvent.type === 'change') {\n        logger.log(\n          '--------------------------------------------------------------------------------',\n        )\n        logger.info(path.relative(cwd, fileEvent.file), 'changed')\n        logger.log('')\n\n        return files.slice(0) // trigger update\n      }\n\n      return files\n    }, initialFiles),\n    startWith(initialFiles),\n    distinctUntilChanged(),\n  )\n}\n","import path from 'node:path'\n\nimport {switchMap} from 'rxjs'\n\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {createLogger} from './logger'\nimport {resolveBuildContext} from './resolveBuildContext'\nimport {resolveWatchTasks} from './resolveWatchTasks'\nimport {type TaskHandler, type WatchTask, watchTaskHandlers} from './tasks'\nimport {watchConfigFiles} from './watchConfigFiles'\n\n/** @public */\nexport async function watch(options: {\n  cwd: string\n  strict?: boolean\n  tsconfig?: string\n}): Promise<void> {\n  const {cwd, strict = false, tsconfig: tsconfigOption} = options\n\n  const logger = createLogger()\n\n  const configFiles$ = await watchConfigFiles({cwd, logger})\n\n  const ctx$ = configFiles$.pipe(\n    switchMap(async (configFiles) => {\n      const files = configFiles.map((f) => path.relative(cwd, f))\n\n      const packageJsonPath = files.find((f) => f === 'package.json')\n\n      if (!packageJsonPath) {\n        throw new Error('missing package.json')\n      }\n\n      const config = await loadConfig({cwd})\n      const legacyExports = config?.legacyExports ?? false\n      const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n      const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n\n      return resolveBuildContext({config, cwd, logger, pkg, strict, tsconfig})\n    }),\n  )\n\n  ctx$.subscribe(async (ctx) => {\n    const watchTasks = resolveWatchTasks(ctx)\n\n    for (const task of watchTasks) {\n      const handler = watchTaskHandlers[task.type] as TaskHandler<WatchTask, unknown>\n      const result$ = handler.exec(ctx, task)\n\n      result$.subscribe({\n        error: (err) => {\n          ctx.logger.error(err)\n          ctx.logger.log()\n\n          process.exit(1)\n        },\n        next: (result) => {\n          handler.complete(ctx, task, result)\n        },\n        complete: () => {\n          ctx.logger.success(handler.name(ctx, task))\n          ctx.logger.log()\n        },\n      })\n    }\n  })\n}\n"],"names":["config","isPkgExport","extMap","strictOptions","resolvePath","path","browserslist","dtsTask","rollupReactCompilerTask","format","fs","parse","ts","execPromise","rollupWatch","esbuild","prettierConfig"],"mappings":"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","x_google_ignoreList":[19,51]}