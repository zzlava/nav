{"version":3,"file":"init.cjs","sources":["../../src/node/core/template/createFromTemplate.ts","../../src/node/core/template/define.ts","../../src/node/isEmptyDirectory.ts","../../node_modules/.pnpm/@sanity+prettier-config@1.0.3_prettier@3.4.2/node_modules/@sanity/prettier-config/dist/index.js","../../src/node/templates/default/template.ts","../../src/node/init.ts"],"sourcesContent":["import {writeFile} from 'node:fs/promises'\nimport {dirname, relative, resolve} from 'node:path'\n\nimport {mkdirp} from 'mkdirp'\nimport prompts from 'prompts'\n\nimport type {Logger} from '../../logger'\nimport type {PkgTemplate} from './types'\n\nconst promptsTypes = {\n  string: 'text' as const,\n}\n\n/** @internal */\nexport async function createFromTemplate(options: {\n  cwd: string\n  logger: Logger\n  packagePath: string\n  template: PkgTemplate\n}): Promise<void> {\n  const {cwd, logger, packagePath, template: templateOrResolver} = options\n\n  const template =\n    typeof templateOrResolver === 'function'\n      ? await templateOrResolver({cwd, logger, packagePath})\n      : templateOrResolver\n\n  logger.log('create new package at', relative(cwd, packagePath))\n\n  const templateOptions: Record<string, string> = {}\n\n  for (const templateOption of template.options) {\n    const templateValidate = templateOption.validate\n\n    const res = await prompts(\n      {\n        type: promptsTypes[templateOption.type],\n        name: templateOption.name,\n        message: templateOption.description,\n        validate: templateValidate ? (prev) => templateValidate(prev) : undefined,\n        initial:\n          typeof templateOption.initial === 'function'\n            ? templateOption.initial(templateOptions)\n            : templateOption.initial,\n      },\n      {onCancel: () => process.exit(0)},\n    )\n\n    templateOptions[templateOption.name] = templateOption.parse\n      ? templateOption.parse(res[templateOption.name])\n      : res[templateOption.name]\n  }\n\n  const features: Record<string, boolean> = {}\n\n  for (const templateFeature of template.features) {\n    const res = templateFeature.optional\n      ? await prompts(\n          {\n            type: 'confirm',\n            name: 'confirm',\n            message: `use ${templateFeature.name}?`,\n            initial: templateFeature.initial,\n          },\n          {onCancel: () => process.exit(0)},\n        )\n      : undefined\n\n    features[templateFeature.name] = res?.confirm || !templateFeature.optional\n  }\n\n  const files = await template.getFiles(templateOptions, features)\n\n  files.sort((a, b) => {\n    return a.name.localeCompare(b.name)\n  })\n\n  for (const file of files) {\n    const filePath = resolve(packagePath, file.name)\n\n    await mkdirp(dirname(filePath))\n    await writeFile(filePath, file.contents.trim() + '\\n')\n\n    logger.success(`wrote ${relative(cwd, filePath)}`)\n  }\n}\n","import type {PkgTemplateOption} from './types'\n\n/** @public */\nexport function defineTemplateOption<T>(option: PkgTemplateOption<T>): PkgTemplateOption<T> {\n  return option\n}\n","import {readdir} from 'node:fs/promises'\n\nexport async function isEmptyDirectory(dirPath: string): Promise<boolean> {\n  return (await readdir(dirPath)).length === 0\n}\n","const overridableDefaults = {\n  endOfLine: \"lf\",\n  tabWidth: 2,\n  useTabs: !1\n}, config = {\n  ...overridableDefaults,\n  printWidth: 100,\n  semi: !1,\n  singleQuote: !0,\n  quoteProps: \"consistent\",\n  bracketSpacing: !1,\n  plugins: [\"prettier-plugin-packagejson\"],\n  overrides: [\n    {\n      files: [\"*.json5\"],\n      options: {\n        quoteProps: \"preserve\",\n        singleQuote: !1\n      }\n    },\n    {\n      files: [\"*.yml\"],\n      options: {\n        singleQuote: !1\n      }\n    }\n  ]\n};\nexport {\n  config as default\n};\n//# sourceMappingURL=index.js.map\n","import {resolve} from 'node:path'\n\nimport prettierConfig from '@sanity/prettier-config'\nimport getLatestVersion from 'get-latest-version'\nimport gitUrlParse from 'git-url-parse'\nimport {outdent} from 'outdent'\nimport parseGitConfig from 'parse-git-config'\nimport prettier, {type Config as PrettierConfig} from 'prettier'\n\nimport {\n  defineTemplateOption,\n  isRecord,\n  type PackageJSON,\n  type PkgTemplate,\n  type PkgTemplateFile,\n} from '../../core'\n\nconst RE_NAME = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)\\/)?[a-z0-9-~][a-z0-9-._~]*$/i\n\nexport const defaultTemplate: PkgTemplate = async ({cwd, logger, packagePath}) => {\n  const gitConfig = await parseGitConfig({cwd, type: 'global'})\n\n  return {\n    options: [\n      defineTemplateOption<{owner: string; name: string}>({\n        name: 'repo',\n        type: 'string',\n        description: 'git url',\n        validate: (v) => {\n          if (!v) return true\n\n          try {\n            gitUrlParse(v)\n\n            return true\n          } catch (err) {\n            return 'invalid git url'\n          }\n        },\n        parse: (v) => {\n          if (!v) return null\n\n          const result = gitUrlParse(v)\n\n          return {source: result.source, owner: result.owner, name: result.name}\n        },\n      }),\n      defineTemplateOption({\n        name: 'pkgName',\n        type: 'string',\n        description: 'package name',\n        initial: (options) => options['repo']?.name || undefined,\n        validate: (v) => {\n          if (!v) return 'package name is required'\n\n          const match = RE_NAME.exec(v)\n\n          if (!match) {\n            return 'invalid package name'\n          }\n\n          return true\n        },\n        parse: (v) => {\n          if (!v) {\n            throw new Error('package name is required')\n          }\n\n          const match = RE_NAME.exec(v)\n\n          if (!match) {\n            throw new Error('invalid package name')\n          }\n\n          const [scope, name] = v.split('/')\n\n          return {scope, name, fullName: v}\n        },\n      }),\n      defineTemplateOption({\n        name: 'description',\n        type: 'string',\n        description: 'package description',\n      }),\n      defineTemplateOption({\n        name: 'authorName',\n        type: 'string',\n        description: 'package author name',\n        initial: gitConfig?.['user']?.name,\n      }),\n      defineTemplateOption({\n        name: 'authorEmail',\n        type: 'string',\n        description: 'package author email',\n        initial: gitConfig?.['user']?.email,\n      }),\n      defineTemplateOption({\n        name: 'license',\n        type: 'string',\n        description: 'package license',\n        initial: 'MIT',\n        validate: (v) => {\n          if (!v) return 'license is required'\n\n          return true\n        },\n      }),\n    ],\n\n    features: [\n      {\n        name: 'eslint',\n        optional: true,\n        initial: true,\n      },\n      {\n        name: 'prettier',\n        optional: true,\n        initial: true,\n      },\n      {\n        name: 'typescript',\n        optional: true,\n        initial: true,\n      },\n    ],\n\n    async getFiles(options, features) {\n      const {pkgName, repo} = options\n      const {fullName: name} = pkgName\n\n      const author =\n        [options['authorName'], options['authorEmail'] && `<${options['authorEmail']}>`]\n          .filter(Boolean)\n          .join(' ') ?? undefined\n\n      const pkgJson: PackageJSON & {\n        prettier?: '@sanity/prettier-config'\n        ['lint-staged']?: Record<string, string[]>\n      } = {\n        name,\n        'version': '0.0.0',\n        'description': options['description'] ?? undefined,\n        'keywords': [],\n        'homepage': undefined,\n        'bugs': undefined,\n        'repository': undefined,\n        'license': options['license'],\n        author,\n        'sideEffects': false,\n        'type': 'module',\n        'exports': {\n          '.': {\n            source: features['typescript'] ? './src/index.ts' : './src/index.js',\n            require: './dist/index.cjs',\n            default: './dist/index.js',\n          },\n          './package.json': './package.json',\n        },\n        'main': './dist/index.cjs',\n        'module': './dist/index.js',\n        'types': undefined,\n        'files': ['dist', 'src'],\n        'scripts': {\n          build: 'pkg build --strict --clean --check',\n          format: features['prettier'] ? 'prettier --write --cache --ignore-unknown .' : undefined,\n        },\n        'lint-staged': features['prettier']\n          ? {\n              '*': ['prettier --write --cache --ignore-unknown'],\n            }\n          : undefined,\n        'browserslist': 'extends @sanity/browserslist-config',\n        'prettier': features['prettier'] ? '@sanity/prettier-config' : undefined,\n        'dependencies': {},\n        'devDependencies': {\n          '@sanity/pkg-utils': '^6',\n          '@sanity/prettier-config': features['prettier'] ? '^1' : undefined,\n          '@typescript-eslint/eslint-plugin': undefined,\n          '@typescript-eslint/parser': undefined,\n          'eslint': undefined,\n          'eslint-config-prettier': undefined,\n          'eslint-plugin-import': undefined,\n          'eslint-plugin-prettier': undefined,\n          'eslint-plugin-simple-import-sort': undefined,\n          'lint-staged': '^15',\n          'prettier': features['prettier'] ? '^3' : undefined,\n          'typescript': undefined,\n        },\n        'engines': {\n          node: '>=18.0.0',\n        },\n      }\n\n      const files: PkgTemplateFile[] = []\n\n      // .editorconfig\n      files.push({\n        name: '.editorconfig',\n        contents: outdent`\n        root = true\n\n        [*]\n        charset = utf-8\n        indent_style = space\n        indent_size = 2\n        end_of_line = lf\n        insert_final_newline = true\n        trim_trailing_whitespace = true\n        `,\n      })\n\n      // .gitignore\n      files.push({\n        name: '.gitignore',\n        contents: outdent`\n        *.local\n        *.log\n        *.tgz\n\n        .DS_Store\n        dist\n        etc\n        node_modules\n        `,\n      })\n\n      if (features['prettier']) {\n        files.push({\n          name: '.prettierignore',\n          contents: outdent`\n          dist\n          pnpm-lock.yaml\n          `,\n        })\n      }\n\n      if (repo) {\n        pkgJson.repository = {\n          type: 'git',\n          url: `git+ssh://git@${repo.source}/${repo.owner}/${repo.name}.git`,\n        }\n        pkgJson.bugs = {\n          url: `https://${repo.source}/${repo.owner}/${repo.name}/issues`,\n        }\n        pkgJson.homepage = `https://${repo.source}/${repo.owner}/${repo.name}#readme`\n      }\n\n      if (features['typescript']) {\n        pkgJson.types = './dist/index.d.ts'\n\n        pkgJson.scripts = {\n          ...pkgJson.scripts,\n          ['ts:check']: 'tsc --noEmit',\n        }\n\n        const devDependencies = pkgJson.devDependencies\n\n        if (isRecord(devDependencies)) {\n          devDependencies['typescript'] = '^5.4'\n        }\n      }\n\n      if (features['eslint']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const eslintConfig: any = {\n          root: true,\n          env: {\n            browser: true,\n            es6: true,\n            node: true,\n          },\n          extends: [\n            'eslint:recommended',\n            features['prettier'] ? 'plugin:prettier/recommended' : undefined,\n          ].filter(Boolean),\n          parserOptions: {\n            ecmaVersion: 2020,\n            sourceType: 'module',\n          },\n          plugins: [\n            'import',\n            'simple-import-sort',\n            features['prettier'] ? 'prettier' : undefined,\n          ].filter(Boolean),\n          rules: {\n            'no-console': 'error',\n            'no-shadow': 'error',\n            'no-warning-comments': ['warn', {location: 'start', terms: ['todo', 'fixme']}],\n            'quote-props': ['warn', 'consistent-as-needed'],\n            'simple-import-sort/exports': 'warn',\n            'simple-import-sort/imports': 'warn',\n            'strict': ['warn', 'global'],\n          },\n        }\n\n        files.push({\n          name: '.eslintignore',\n          contents: outdent`\n          dist\n          `,\n        })\n\n        pkgJson.scripts = {\n          ...pkgJson.scripts,\n          lint: features['typescript']\n            ? 'eslint . --ext .cjs,.js,.ts,.tsx'\n            : 'eslint . --ext .cjs,.js',\n        }\n\n        pkgJson.devDependencies = {\n          ...pkgJson.devDependencies,\n          'eslint': '^8',\n          'eslint-config-prettier': features['prettier'] ? '^9' : undefined,\n          'eslint-plugin-import': '^2',\n          'eslint-plugin-prettier': features['prettier'] ? '^5' : undefined,\n          'eslint-plugin-simple-import-sort': '^12',\n        }\n\n        if (features['typescript']) {\n          pkgJson.devDependencies = {\n            ...pkgJson.devDependencies,\n            '@typescript-eslint/eslint-plugin': '^7',\n            '@typescript-eslint/parser': '^7',\n          }\n\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const eslintConfigOverride: any = {\n            files: ['**/*.ts', '**/*.tsx'],\n            parser: '@typescript-eslint/parser',\n            parserOptions: {\n              project: ['./tsconfig.json'],\n            },\n            extends: [\n              'eslint:recommended',\n              features['prettier'] ? 'plugin:prettier/recommended' : undefined,\n              'plugin:@typescript-eslint/eslint-recommended',\n              'plugin:@typescript-eslint/recommended',\n            ].filter(Boolean),\n            plugins: [\n              'import',\n              '@typescript-eslint',\n              'simple-import-sort',\n              features['prettier'] ? 'prettier' : undefined,\n            ].filter(Boolean),\n            rules: {\n              '@typescript-eslint/explicit-module-boundary-types': 'error',\n              '@typescript-eslint/interface-name-prefix': 'off',\n              '@typescript-eslint/member-delimiter-style': 'off',\n              '@typescript-eslint/no-empty-interface': 'off',\n            },\n          }\n\n          eslintConfig.overrides = [eslintConfigOverride]\n        }\n\n        files.push({\n          name: '.eslintrc.cjs',\n          contents: await format(\n            resolve(packagePath, '.eslintrc.cjs'),\n            outdent`\n            'use strict'\n\n            /** @type import('eslint').Linter.Config */\n            module.exports = ${JSON.stringify(eslintConfig, null, 2)}\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      if (features['typescript']) {\n        files.push({\n          name: 'tsconfig.settings.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.settings.json'),\n            outdent`\n            {\n              \"extends\": \"@sanity/pkg-utils/tsconfig/strictest.json\",\n              \"compilerOptions\": {\n                \"rootDir\": \".\",\n                \"outDir\": \"./dist\"\n              }\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'tsconfig.dist.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.dist.json'),\n            outdent`\n            {\n              \"extends\": \"./tsconfig.settings\",\n              \"include\": [\"./src\"],\n              \"exclude\": [\"./src/**/*.test.ts\"]\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'tsconfig.json',\n          contents: await format(\n            resolve(packagePath, 'tsconfig.json'),\n            outdent`\n            {\n              \"extends\": \"./tsconfig.settings\",\n              \"include\": [\"./**/*.cjs\", \"./**/*.ts\", \"./**/*.tsx\"],\n              \"exclude\": [\"./node_modules\"]\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      // source file\n      if (features['typescript']) {\n        files.push({\n          name: 'package.config.ts',\n          contents: await format(\n            resolve(packagePath, 'package.config.ts'),\n            outdent`\n            import {defineConfig} from '@sanity/pkg-utils'\n\n            // https://github.com/sanity-io/pkg-utils#configuration\n            export default defineConfig({\n              // the path to the tsconfig file for distributed builds\n              tsconfig: 'tsconfig.dist.json',\n            })\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'src/index.ts',\n          contents: await format(\n            resolve(packagePath, 'src/index.ts'),\n            outdent`\n            /** @public */\n            export function main(): void {\n              //\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      } else {\n        files.push({\n          name: 'package.config.js',\n          contents: await format(\n            resolve(packagePath, 'package.config.js'),\n            outdent`\n            import {defineConfig} from '@sanity/pkg-utils'\n\n            export default defineConfig({\n              extract: {\n                rules: {\n                  // do not require internal members to be prefixed with \\`_\\`\n                  'ae-internal-missing-underscore': 'off',\n                },\n              },\n            })\n            `,\n            prettierConfig,\n          ),\n        })\n\n        files.push({\n          name: 'src/index.js',\n          contents: await format(\n            resolve(packagePath, 'src/index.js'),\n            outdent`\n            /** @public */\n            export function main() {\n              //\n            }\n            `,\n            prettierConfig,\n          ),\n        })\n      }\n\n      // Resolve latest dependencies\n      try {\n        pkgJson.dependencies = await resolveLatestDeps(pkgJson.dependencies ?? {})\n      } catch (error) {\n        logger.warn(error instanceof Error ? error.message : error)\n      }\n\n      // Resolve latest devDependencies\n      try {\n        pkgJson.devDependencies = await resolveLatestDeps(pkgJson.devDependencies ?? {})\n      } catch (error) {\n        logger.warn(error instanceof Error ? error.message : error)\n      }\n\n      files.push({\n        name: 'package.json',\n        contents: await format(\n          resolve(packagePath, 'package.json'),\n          JSON.stringify(pkgJson, null, 2),\n          prettierConfig,\n        ),\n      })\n\n      return files\n    },\n  }\n}\n\nfunction format(filepath: string, input: string, prettierOptions: PrettierConfig | undefined) {\n  return prettier.format(input, {...prettierOptions, plugins: [], filepath})\n}\n\nasync function resolveLatestDeps(deps: Record<string, string | undefined>) {\n  const depsEntries = Object.entries(deps)\n  const latestDeps: Record<string, string> = {}\n\n  for (const entry of depsEntries) {\n    const [name, version] = entry\n\n    if (version) {\n      const latestVersion = await getLatestVersion(name, version)\n\n      latestDeps[name] = latestVersion ? `^${latestVersion}` : version\n    }\n  }\n\n  return latestDeps\n}\n","import {lstat} from 'node:fs/promises'\nimport {resolve} from 'node:path'\n\nimport {mkdirp} from 'mkdirp'\n\nimport {createFromTemplate} from './core/template'\nimport {fileExists} from './fileExists'\nimport {isEmptyDirectory} from './isEmptyDirectory'\nimport {createLogger} from './logger'\nimport {defaultTemplate} from './templates'\n\n/** @public */\nexport async function init(options: {cwd: string; path: string}): Promise<void> {\n  if (!options.cwd) {\n    throw new Error('Missing required option: cwd')\n  }\n\n  if (!options.path) {\n    throw new Error('Missing required option: path')\n  }\n\n  const logger = createLogger()\n\n  const packagePath = resolve(options.cwd, options.path)\n\n  await ensurePackagePath(packagePath)\n\n  await createFromTemplate({\n    cwd: options.cwd,\n    logger,\n    template: defaultTemplate,\n    packagePath,\n  })\n}\n\nasync function ensurePackagePath(packagePath: string): Promise<void> {\n  const exists = fileExists(packagePath)\n\n  if (!exists) {\n    await mkdirp(packagePath)\n\n    return\n  }\n\n  const dir = (await lstat(packagePath)).isDirectory()\n\n  if (!dir) {\n    throw new Error('the package path is a file, not a directory')\n  }\n\n  const empty = await isEmptyDirectory(packagePath)\n\n  if (!empty) {\n    throw new Error('the package directory is not empty')\n  }\n}\n"],"names":["logger","relative","prompts","resolve","mkdirp","dirname","writeFile","readdir","parseGitConfig","gitUrlParse","outdent","isRecord","prettierConfig","prettier","getLatestVersion","createLogger","fileExists","lstat"],"mappings":"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","x_google_ignoreList":[3]}