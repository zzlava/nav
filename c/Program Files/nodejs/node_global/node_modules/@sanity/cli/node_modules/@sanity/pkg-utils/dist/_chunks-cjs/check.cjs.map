{"version":3,"file":"check.cjs","sources":["../../src/node/getFilesize.ts","../../src/node/printPackageTree.ts","../../src/node/check.ts"],"sourcesContent":["import {statSync} from 'node:fs'\n\nimport prettyBytes from 'pretty-bytes'\n\nexport function getFilesize(file: string): string {\n  const stats = statSync(file)\n\n  return prettyBytes(stats.size)\n}\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport treeify from 'treeify'\n\nimport type {BuildContext, PkgExport} from './core'\nimport {fileExists} from './fileExists'\nimport {getFilesize} from './getFilesize'\n\nfunction getFileInfo(cwd: string, filePath: string) {\n  const p = path.resolve(cwd, filePath)\n  const exists = fileExists(p)\n  const size = exists ? getFilesize(p) : undefined\n\n  return {exists, size}\n}\n\nexport function printPackageTree(ctx: BuildContext): void {\n  const {cwd, exports, logger, pkg} = ctx\n\n  if (!exports) return\n\n  logger.log(`${chalk.blue(pkg.name)}@${chalk.green(pkg.version)}`)\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const tree: Record<string, unknown> = {}\n\n  if (pkg.type) {\n    tree['type'] = chalk.yellow(pkg.type)\n  }\n\n  if (pkg.bin) {\n    tree['bin'] = Object.fromEntries(\n      Object.entries(pkg.bin).map(([name, file]) => [chalk.cyan(name), fileInfo(file)]),\n    )\n  }\n\n  function fileInfo(file: string) {\n    const info = getFileInfo(cwd, file)\n\n    if (!info.size) {\n      return `${chalk.gray(file)} ${chalk.red('does not exist')}`\n    }\n\n    return `${chalk.yellow(file)} ${chalk.gray(info.size)}`\n  }\n\n  tree['exports'] = Object.fromEntries(\n    Object.entries(exports)\n      .filter(([, entry]) => entry._exported)\n      .map(([exportPath, entry]) => {\n        const exp: Omit<PkgExport, '_exported'> = {\n          source: fileInfo(entry.source),\n          browser: undefined,\n          require: undefined,\n          node: undefined,\n          import: undefined,\n          default: fileInfo(entry.default),\n        }\n\n        if (entry.browser) {\n          exp.browser = {source: fileInfo(entry.browser.source)}\n\n          if (entry.browser.import) exp.browser.import = fileInfo(entry.browser.import)\n          if (entry.browser.require) exp.browser.require = fileInfo(entry.browser.require)\n        } else {\n          delete exp.browser\n        }\n\n        if (entry.require) {\n          exp.require = fileInfo(entry.require)\n        } else {\n          delete exp.require\n        }\n\n        if (entry.node) {\n          exp.node = {}\n\n          if (entry.node.source) exp.node.source = fileInfo(entry.node.source)\n          if (entry.node.import) exp.node.import = fileInfo(entry.node.import)\n          if (entry.node.require) exp.node.require = fileInfo(entry.node.require)\n        } else {\n          delete exp.node\n        }\n\n        if (entry.import) {\n          exp.import = fileInfo(entry.import)\n        } else {\n          delete exp.import\n        }\n\n        return [chalk.cyan(path.join(pkg.name, exportPath)), exp]\n      }),\n  )\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  logger.log(treeify.asTree(tree as Record<string, any>, true, true))\n}\n","import path from 'node:path'\n\nimport esbuild, {type BuildFailure, type Message} from 'esbuild'\n\nimport {createConsoleSpy} from './consoleSpy'\nimport {loadConfig, loadPkgWithReporting} from './core'\nimport {fileExists} from './fileExists'\nimport {createLogger, type Logger} from './logger'\nimport {printPackageTree} from './printPackageTree'\nimport {resolveBuildContext} from './resolveBuildContext'\n\n/** @public */\nexport async function check(options: {\n  cwd: string\n  strict?: boolean\n  tsconfig?: string\n}): Promise<void> {\n  const {cwd, strict = false, tsconfig: tsconfigOption} = options\n  const logger = createLogger()\n\n  const config = await loadConfig({cwd})\n  const legacyExports = config?.legacyExports ?? false\n  const pkg = await loadPkgWithReporting({cwd, logger, strict, legacyExports})\n  const tsconfig = tsconfigOption || config?.tsconfig || 'tsconfig.json'\n  const ctx = await resolveBuildContext({config, cwd, logger, pkg, strict, tsconfig})\n\n  printPackageTree(ctx)\n\n  if (strict) {\n    const missingFiles: string[] = []\n\n    // Check if there are missing files\n    for (const [, exp] of Object.entries(ctx.exports || {})) {\n      if (exp.source && !fileExists(path.resolve(cwd, exp.source))) {\n        missingFiles.push(exp.source)\n      }\n\n      if (exp.require && !fileExists(path.resolve(cwd, exp.require))) {\n        missingFiles.push(exp.require)\n      }\n\n      if (exp.import && !fileExists(path.resolve(cwd, exp.import))) {\n        missingFiles.push(exp.import)\n      }\n    }\n\n    if (ctx.pkg.types && !fileExists(path.resolve(cwd, ctx.pkg.types))) {\n      missingFiles.push(ctx.pkg.types)\n    }\n\n    if (missingFiles.length) {\n      logger.error(`missing files: ${missingFiles.join(', ')}`)\n      process.exit(1)\n    }\n\n    // Check if the files are resolved\n    const exportPaths: {require: string[]; import: string[]} = {\n      require: [],\n      import: [],\n    }\n\n    for (const exp of Object.values(ctx.exports || {})) {\n      if (!exp._exported) continue\n      if (exp.require) exportPaths.require.push(exp.require)\n      if (exp.import) exportPaths.import.push(exp.import)\n    }\n\n    const external = [\n      ...Object.keys(pkg.dependencies || {}),\n      ...Object.keys(pkg.devDependencies || {}),\n    ]\n\n    const consoleSpy = createConsoleSpy()\n\n    if (exportPaths.import.length) {\n      checkExports(exportPaths.import, {cwd, external, format: 'esm', logger})\n    }\n\n    if (exportPaths.require.length) {\n      checkExports(exportPaths.require, {cwd, external, format: 'cjs', logger})\n    }\n\n    consoleSpy.restore()\n  }\n}\n\nasync function checkExports(\n  exportPaths: string[],\n  options: {cwd: string; external: string[]; format: 'esm' | 'cjs'; logger: Logger},\n) {\n  const {cwd, external, format, logger} = options\n\n  const code = exportPaths\n    .map((id) => (format ? `import('${id}');` : `require('${id}');`))\n    .join('\\n')\n\n  try {\n    const esbuildResult = await esbuild.build({\n      bundle: true,\n      external,\n      format,\n      logLevel: 'silent',\n      // otherwise output maps to stdout as we're using stdin\n      outfile: '/dev/null',\n      platform: 'node',\n      stdin: {\n        contents: code,\n        loader: 'js',\n        resolveDir: cwd,\n      },\n    })\n\n    if (esbuildResult.errors.length > 0) {\n      for (const msg of esbuildResult.errors) {\n        printEsbuildMessage(logger.warn, msg)\n\n        logger.log()\n      }\n\n      process.exit(1)\n    }\n\n    const esbuildWarnings = esbuildResult.warnings.filter((msg) => {\n      !(msg.detail || msg.text).includes(`does not affect esbuild's own target setting`)\n    })\n\n    for (const msg of esbuildWarnings) {\n      printEsbuildMessage(logger.warn, msg)\n\n      logger.log()\n    }\n  } catch (err) {\n    if (isEsbuildFailure(err)) {\n      const {errors} = err\n\n      for (const msg of errors) {\n        printEsbuildMessage(logger.error, msg)\n\n        logger.log()\n      }\n    } else if (err instanceof Error) {\n      logger.error(err.stack || err.message)\n\n      logger.log()\n    } else {\n      logger.error(`${err}`)\n\n      logger.log()\n    }\n\n    process.exit(1)\n  }\n}\n\nfunction printEsbuildMessage(log: (...args: unknown[]) => void, msg: esbuild.Message) {\n  if (msg.location) {\n    log(\n      [\n        `${msg.detail || msg.text}\\n`,\n        `${msg.location.line} | ${msg.location.lineText}\\n`,\n        `in ./${msg.location.file}:${msg.location.line}:${msg.location.column}`,\n      ].join(''),\n    )\n  } else {\n    log(msg.detail || msg.text)\n  }\n}\n\nfunction isEsbuildFailure(err: unknown): err is BuildFailure {\n  return (\n    err instanceof Error &&\n    'errors' in err &&\n    Array.isArray(err.errors) &&\n    err.errors.every(isEsbuildMessage) &&\n    'warnings' in err &&\n    Array.isArray(err.warnings) &&\n    err.warnings.every(isEsbuildMessage)\n  )\n}\n\nfunction isEsbuildMessage(msg: unknown): msg is Message {\n  return (\n    typeof msg === 'object' &&\n    msg !== null &&\n    'text' in msg &&\n    typeof msg.text === 'string' &&\n    'location' in msg &&\n    (msg.location === null || typeof msg.location === 'object')\n  )\n}\n"],"names":["statSync","prettyBytes","path","fileExists","exports","logger","chalk","treeify","createLogger","loadConfig","loadPkgWithReporting","resolveBuildContext","consoleSpy","createConsoleSpy","esbuild"],"mappings":"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"}